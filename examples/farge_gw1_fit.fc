pos: (0.0, 0.0)
connects: [(u'TimeLag.0', 'tlag', u'Diffusivity (Ferris).0', 'tlag'), ('all', 'output', u'TimeLag.0', 'df_gw'), (u'pipe.0', 'Out', u'FFT.0', 'df'), ('all', 'output', u'pipe.0', 'In'), (u'tidalEfficiency.0', 'E', u'TimeLag.0', 'E'), ('gw1_gen', 'Curve', u'TimeseriesPlot.0', 'Curves'), (u'tidalEfficiency.0', 'E', u'Diffusivity (Ferris).0', 'E'), (u'pipe.0', 'Out', 'gw1_curve', 'df'), (u'FFT.0', 'params', u'Generate Curve.0', 'tides'), ('w_crve', 'Curve', u'TimeseriesPlot.0', 'Curves'), ('1min', 'output', u'TimeLag.0', 'df_w'), ('all', 'output', u'tidalEfficiency.0', 'df'), ('gw1_curve', 'Curve', u'TimeseriesPlot.0', 'Curves'), (u'Generate Curve.0', 'sig', 'gw1_gen', 'df'), (u'pipe.0', 'Out', 'w_crve', 'df')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'pos': (189.67437180231212, 85.72644055755478), 'bypass': False}, 'pos': (189.67437180231212, 85.72644055755478), 'class': 'pipe', 'name': u'pipe.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/dara_farge.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-180.87744542900833, -64.50524820219375), 'bypass': False}, 'pos': (-180.87744542900833, -64.50524820219375), 'class': 'readXLS', 'name': 'all'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('label', {'expanded': True, 'name': 'label', 'strictNaming': False, 'default': 'Generated Curve', 'enabled': True, 'title': 'Curve Label', 'renamable': False, 'value': u'Generated GW1', 'visible': True, 'readonly': False, 'tip': 'Label of the curve to be displayed in pd.DataFrame', 'removable': False, 'type': 'str'}), ('eq', {'expanded': True, 'name': 'eq', 'limits': {'Simple Tide Equation': 'tide', 'Ferris 1951 Equation': 'ferris', 'Xia 2007 Equation': 'xia'}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Governing Equation', 'renamable': False, 'value': 'ferris', 'visible': True, 'readonly': False, 'tip': 'Equation to generate curve. See documentation', 'values': {'Simple Tide Equation': 'tide', 'Ferris 1951 Equation': 'ferris', 'Xia 2007 Equation': 'xia'}, 'removable': False, 'type': 'list'}), ('tides_grp', {'expanded': True, 'name': 'tides_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tide Components', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('n_sig', {'expanded': True, 'name': 'n_sig', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'N Signal Components', 'renamable': False, 'value': 50, 'visible': True, 'readonly': True, 'removable': False, 'type': 'int'}), ('A', {'expanded': True, 'name': 'A', 'limits': ['Amplitude [m]', 'Angular Velocity [rad/s]', 'Phase shift [rad]'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with Amplitude data in dataframe in input terminal', 'title': 'Amplitude', 'renamable': False, 'value': 'Amplitude [m]', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('omega', {'expanded': True, 'name': 'omega', 'limits': ['Amplitude [m]', 'Angular Velocity [rad/s]', 'Phase shift [rad]'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with Angular Velocity data in dataframe in input terminal', 'title': 'Angular Velocity', 'renamable': False, 'value': 'Angular Velocity [rad/s]', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('phi', {'expanded': True, 'name': 'phi', 'limits': ['Amplitude [m]', 'Angular Velocity [rad/s]', 'Phase shift [rad]'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with Phase Shift data in dataframe in input terminal', 'title': 'Phase Shift', 'renamable': False, 'value': 'Phase shift [rad]', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True})])}), ('W', {'expanded': True, 'name': 'W', 'strictNaming': False, 'default': 0.50622229172367839, 'enabled': True, 'title': 'Constant to add', 'renamable': False, 'value': 0.506222291724, 'visible': True, 'readonly': False, 'tip': 'Constant value [meters] to be added to generated signal. Usefull to fit to average water level.', 'removable': False, 'type': 'float', 'suffix': ' m'}), ('t_grp', {'expanded': True, 'name': 't_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Options', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('t0', {'expanded': True, 'name': 't0', 'strictNaming': False, 'default': '2015-12-31 00:00:00', 'enabled': True, 'title': 'Start', 'renamable': False, 'value': u'2014-10-17 15:00:00', 'visible': True, 'readonly': False, 'tip': 'Datetime of the initial timestep', 'removable': False, 'type': 'str'}), ('tend', {'expanded': True, 'name': 'tend', 'strictNaming': False, 'default': '2016-01-30 00:00:00', 'enabled': True, 'title': 'Stop', 'renamable': False, 'value': u'2015-04-13 06:00:00', 'visible': True, 'readonly': False, 'tip': 'Datetime of the last timestep', 'removable': False, 'type': 'str'}), ('dt', {'expanded': True, 'suffix': ' s', 'tip': 'Timesep duration in seconds', 'visible': True, 'step': 60, 'name': 'dt', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 3600, 'title': 'Delta Time', 'renamable': False, 'value': 3600, 'readonly': False, 'removable': False, 'type': 'int', 'enabled': True})])}), ('ferris_grp', {'expanded': True, 'name': 'ferris_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Ferris Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('D', {'expanded': True, 'suffix': ' m**2/s', 'strictNaming': False, 'default': 0.5, 'tip': 'Diffusivity of the aquifer', 'title': 'Diffusivity', 'renamable': False, 'readonly': False, 'value': 0.005, 'visible': True, 'step': 0.1, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'D'}), ('x', {'expanded': True, 'suffix': ' m', 'tip': 'Distance between the observation point in aquifer and the shore-line', 'visible': True, 'step': 5.0, 'name': 'x', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 0.0, 'title': 'Distance to shore', 'renamable': False, 'value': 10.0, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True})])}), ('xia_grp', {'expanded': False, 'name': 'xia_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Xia Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x', {'expanded': True, 'suffix': ' m', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Distance between the observation point in aquifer and the shore-line', 'title': 'Distance to shore', 'renamable': False, 'value': 0.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'x'}), ('alpha', {'expanded': True, 'suffix': ' m*s**2/kg', 'tip': 'Compressibility of the confined aquifers skeleton. Used for calculation of Specific Storage Ss', 'visible': True, 'step': 1e-05, 'name': 'alpha', 'limits': (0.0, 1), 'strictNaming': False, 'default': 1e-08, 'title': 'Skeleton compressibility', 'renamable': False, 'value': 1e-08, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('beta', {'expanded': True, 'suffix': ' m*s**2/kg', 'tip': 'Compressibility of pore water in the confined aquifer. Used for calculation of Specific Storage Ss', 'visible': True, 'step': 1e-05, 'name': 'beta', 'limits': (0.0, 1), 'strictNaming': False, 'default': 4.8e-10, 'title': 'Water compressibility', 'renamable': False, 'value': 4.8e-10, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('theta', {'expanded': True, 'name': 'theta', 'limits': (0.0, 1), 'strictNaming': False, 'default': 0.4, 'tip': 'Porosity (dimensionless) of the aquifer. Used for calculation of Specific Storage Ss', 'title': 'Porosity', 'renamable': False, 'readonly': False, 'value': 0.35, 'visible': True, 'step': 0.01, 'removable': False, 'type': 'float', 'enabled': True}), ('L', {'expanded': True, 'suffix': ' m', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 100.0, 'tip': 'Distance to which aquifers roof extends into the sea', 'title': 'Roof length', 'renamable': False, 'value': 100.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'L'}), ('L_inf', {'expanded': True, 'name': 'L_inf', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Infinite Roof length', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Check this to set roof length to infinity', 'removable': False, 'type': 'bool'}), ('K1', {'expanded': True, 'suffix': ' m/s', 'tip': 'Vertical hydraulic conductivity of the aquifer roof', 'visible': True, 'step': 1e-05, 'name': 'K1', 'limits': (0.0, 1), 'strictNaming': False, 'default': 1e-06, 'title': 'Kf (roof)', 'renamable': False, 'value': 1e-06, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('b1', {'expanded': True, 'suffix': ' m', 'tip': 'Thickness of the aquifer roof', 'visible': True, 'step': 0.1, 'name': 'b1', 'limits': (0.0, 100), 'strictNaming': False, 'default': 5.0, 'title': 'b (roof)', 'renamable': False, 'value': 5.0, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('K', {'expanded': True, 'suffix': ' m/s', 'tip': 'Hydraulic conductivity of the (leaky) confined aquifer', 'visible': True, 'step': 1e-05, 'name': 'K', 'limits': (0.0, 1), 'strictNaming': False, 'default': 0.0001, 'title': 'Kf (aquifer)', 'renamable': False, 'value': 0.0001, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('b', {'expanded': True, 'suffix': ' m', 'tip': 'Thickness of the (leaky) cofined aquifer', 'visible': True, 'step': 1, 'name': 'b', 'limits': (0.0, 1000), 'strictNaming': False, 'default': 20.0, 'title': 'b (aquifer)', 'renamable': False, 'value': 20.0, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('K_cap', {'expanded': True, 'suffix': ' m/s', 'tip': 'Permeability of the outlet-capping', 'visible': True, 'step': 1e-05, 'name': 'K_cap', 'limits': (0.0, 1), 'strictNaming': False, 'default': 1e-06, 'title': 'Kf (capping)', 'renamable': False, 'value': 1e-06, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('b_cap', {'expanded': True, 'suffix': ' m', 'tip': 'Thickness of the aquifers outlet-capping', 'visible': True, 'step': 0.1, 'name': 'b_cap', 'limits': (0.0, 100), 'strictNaming': False, 'default': 1.0, 'title': 'b (capping)', 'renamable': False, 'value': 1.0, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True}), ('Ss', {'expanded': True, 'name': 'Ss', 'strictNaming': False, 'default': -999.0, 'enabled': True, 'title': 'Specific Storage', 'renamable': False, 'value': 9.974808e-05, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float', 'suffix': ' 1/m'}), ('D', {'expanded': True, 'name': 'D', 'strictNaming': False, 'default': -999.0, 'enabled': True, 'title': 'Diffusivity', 'renamable': False, 'value': 1.0025255623967901, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float', 'suffix': ' m**2/s'})])})])}, 'pos': (489.55741855406916, 94.69764946228497), 'bypass': False}, 'pos': (489.55741855406916, 94.69764946228497), 'class': 'Generate Curve', 'name': u'Generate Curve.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x0', {'expanded': True, 'suffix': 'm', 'limits': (0.0, 10000000.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Distance between an observed well and shoreline (in meters)', 'title': 'Distance', 'renamable': False, 'value': 10.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'x0'}), ('t0', {'expanded': True, 'suffix': 'hours', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 12.42, 'tip': 'Period of the tide (in hours)', 'title': 'Tide Period', 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 't0'}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.30288056264627705, 'visible': True, 'readonly': False, 'tip': 'Estimated or guessed Tidal Efficiency of an aquifer near an observed well (dimensionless).', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use Tidal Efficiency value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('tlag', {'expanded': True, 'suffix': 'min', 'limits': (0.0, 600.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Estimated or guessed Time Lag (in minutes) of the groundwater fluctuation-signal in observed well.', 'title': 'Time Lag', 'renamable': False, 'value': 23.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'tlag'}), ('manual_tlag', {'expanded': True, 'name': 'manual_tlag', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `tlag` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use Time Lag value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('D_grp', {'expanded': True, 'name': 'D_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Calculated Diffusivity', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('D_e', {'expanded': True, 'name': 'D_e', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (E)', 'renamable': False, 'value': '0.0049', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('D_tlag', {'expanded': True, 'name': 'D_tlag', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (tlag)', 'renamable': False, 'value': '0.1868', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (192.3248450077723, -71.92688465974328), 'bypass': False}, 'pos': (192.3248450077723, -71.92688465974328), 'class': 'Diffusivity (Ferris)', 'name': u'Diffusivity (Ferris).0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sig', {'expanded': True, 'name': 'sig', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with waterlevel data.', 'title': 'Signal', 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with datetime (or __index__)', 'title': 'Datetime', 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('N_MAX_POW', {'expanded': True, 'name': 'N_MAX_POW', 'limits': (1, 100000000000.0), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': 'Number of Sinusoids', 'renamable': False, 'value': 50, 'visible': True, 'readonly': False, 'tip': 'Number of partial sinusoids used to fit data. Sinusoids with most powerful frequencies are selected. See docs', 'removable': False, 'type': 'int'}), ('ranges', {'expanded': True, 'name': 'ranges', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Slice datetime', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('t0', {'expanded': True, 'name': 't0', 'strictNaming': False, 'default': '2014-10-17 15:00:00', 'enabled': True, 'title': 'Datetime Start', 'renamable': False, 'value': '2014-10-17 15:00:00', 'visible': True, 'readonly': False, 'tip': 'start of the slice region', 'removable': False, 'type': 'str'}), ('t1', {'expanded': True, 'name': 't1', 'strictNaming': False, 'default': '2015-04-13 06:00:00', 'enabled': True, 'title': 'Datetime Stop', 'renamable': False, 'value': '2015-04-13 06:00:00', 'visible': True, 'readonly': False, 'tip': 'end of the slice region', 'removable': False, 'type': 'str'}), ('eq', {'expanded': True, 'name': 'eq', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Generated Equation', 'renamable': False, 'value': u'def generated_function(t): return (np.zeros(25579) + [ 0.50622229] + 0.109411521702*np.cos(0.000141651492519*t+0.717271084409) + 0.0817109126657*np.cos(0.000138376313501*t+2.69588830876) + 0.231897851955*np.cos(0.000137966916124*t+-0.240106606802) + 0.0550691717469*np.cos(0.000136738723992*t+-2.87295703184) + 0.100330831572*np.cos(0.000137557518747*t+-2.52555294033) + 0.104592129043*np.cos(0.000135101134483*t+-1.80658594807) + 0.0803803721556*np.cos(0.000135919929238*t+2.46794674876) + 0.198808232354*np.cos(0.000135510531861*t+-1.35118937317) + 0.0816396923661*np.cos(2.62014321422e-05*t+1.13135672821) + 0.0617523901528*np.cos(7.28727331455e-05*t+1.98180736624) + 0.0518709076169*np.cos(0.000281255998152*t+0.399172168257) + 0.0532550948868*np.cos(3.39799823094e-05*t+-2.03288232622) + 0.111452729221*np.cos(9.82553705333e-06*t+-2.89156641777) + 0.0724342723582*np.cos(8.18794754444e-06*t+3.0720094714) + 0.0736071106683*np.cos(9.00674229889e-06*t+2.51741249089) + 0.0664200717407*np.cos(1.1053729185e-05*t+0.98208246676) + 0.0548618238308*np.cos(1.71946898433e-05*t+-0.745845186597) + 0.0676682573054*np.cos(1.59664977117e-05*t+-0.0613650250883) + 1.53195598246*np.cos(0.000140423300387*t+-2.32495738111) + 0.491407454336*np.cos(0.000140832697764*t+0.788185733404) + 0.236621981093*np.cos(8.18794754444e-07*t+0.45556094238) + 0.143684861639*np.cos(4.09397377222e-07*t+-2.90401523267) + 0.113724315821*np.cos(1.22819213167e-06*t+-0.706669318397) + 0.145771707805*np.cos(0.000139604505633*t+-2.36170764037) + 0.108745705209*np.cos(2.04698688611e-06*t+1.83741379417) + 0.179538012519*np.cos(2.86578164056e-06*t+-2.2621933474) + 0.114630426758*np.cos(0.000142060889896*t+0.626701250414) + 0.0649384869674*np.cos(0.000142470287273*t+0.68153971824) + 0.0890459048308*np.cos(0.000139195108256*t+-2.33257375215) + 0.260013247989*np.cos(0.00014001390301*t+-2.46613679166) + 0.0571370324327*np.cos(3.07048032917e-05*t+0.0142250739476) + 0.0876053027587*np.cos(2.947661116e-05*t+0.397674228709) + 0.198725757733*np.cos(0.000141242095142*t+0.654556750368) + 0.0661666296742*np.cos(6.75505672417e-05*t+3.10877439971) + 0.109300415974*np.cos(3.684576395e-06*t+-2.07507101988) + 0.0728196283951*np.cos(4.91276852667e-06*t+-2.43738021768) + 0.10852498925*np.cos(4.50337114944e-06*t+-1.76546161273) + 0.102270543381*np.cos(5.73156328111e-06*t+-0.519209485492) + 0.057550730837*np.cos(2.33356505017e-05*t+2.89458022939) + 0.144401088668*np.cos(7.36915279e-06*t+1.82022060835) + 0.0993172543529*np.cos(1.26913186939e-05*t+1.09216574869) + 0.114737539735*np.cos(0.000145745466291*t+2.16446529223) + 0.427870246241*np.cos(0.000145336068914*t+0.140852374104) + 0.0941574959551*np.cos(0.000144926671537*t+0.497232058934) + 0.106544651397*np.cos(0.000144517274159*t+0.604005916826) + 0.0765701705959*np.cos(0.000144107876782*t+0.818733251289) + 0.108262317725*np.cos(0.000143698479405*t+0.778420031235) + 0.194757465503*np.cos(0.000143289082028*t+1.35695961397) + 0.150498223311*np.cos(0.000142879684651*t+-0.155687953241) + 0.0634300305226*np.cos(0.000280846600774*t+-2.86688139142))', 'visible': True, 'readonly': False, 'tip': 'This equation is generated after processing. You may copy it to buffer.\nIf you want to access parameters independently consider opening table that is stored in terminal `params`', 'removable': False, 'type': 'text'}), ('plot', {'expanded': True, 'name': 'plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Display plot', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (369.9141143428013, 96.32877835405412), 'bypass': False}, 'pos': (369.9141143428013, 96.32877835405412), 'class': 'FFT', 'name': u'FFT.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (85, 0, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (368.6907676739749, 211.16025233460124), 'bypass': False}, 'pos': (368.6907676739749, 211.16025233460124), 'class': 'makeTimeseriesCurve', 'name': 'gw1_curve'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Water level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': 'm AMSL', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (849.7106778566933, 203.08616432034404), 'bypass': False}, 'pos': (849.7106778566933, 203.08616432034404), 'class': 'TimeseriesPlot', 'name': u'TimeseriesPlot.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (85, 170, 0, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (369.98664596811227, 329.0496175854049), 'bypass': False}, 'pos': (369.98664596811227, 329.0496175854049), 'class': 'makeTimeseriesCurve', 'name': 'w_crve'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'W [NN+m]'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data\nin `df_w` dataframe', 'title': None, 'renamable': False, 'value': u'W [NN+m]', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('river_dtime', {'expanded': True, 'name': 'river_dtime', 'limits': [u'datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects\nin `df_w` dataframe', 'title': None, 'renamable': False, 'value': u'datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data\nin `df_gw` dataframe', 'title': None, 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw_dtime', {'expanded': True, 'name': 'gw_dtime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects\nin `df_gw` dataframe', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) Erskine 1991'], 'strictNaming': False, 'default': '1) Erskine 1991', 'tip': 'Method to calculate TimeLag. Read docs', 'title': None, 'renamable': False, 'value': '1) Erskine 1991', 'visible': True, 'readonly': False, 'values': ['1) Erskine 1991'], 'removable': False, 'type': 'list', 'enabled': True}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.30288056264627705, 'visible': True, 'readonly': False, 'tip': 'Tidal Efficiency (dimensionless)', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use `E` value received in terminal or set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('t1', {'expanded': True, 'name': 't1', 'limits': (0, 10000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'First value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('t2', {'expanded': True, 'name': 't2', 'limits': (0, 10000), 'strictNaming': False, 'default': 60, 'enabled': True, 'title': None, 'renamable': False, 'value': 60, 'visible': True, 'readonly': False, 'tip': 'Last value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('t_step', {'expanded': True, 'name': 't_step', 'limits': (1, 10000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Step value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('tlag = ', {'expanded': True, 'name': 'tlag = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0:23:00', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (73.57866168697797, -239.44382184443378), 'bypass': False}, 'pos': (73.57866168697797, -239.44382184443378), 'class': 'TimeLag', 'name': u'TimeLag.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/data_farge_river_1min.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-180.87744542900808, -243.6847569630333), 'bypass': False}, 'pos': (-180.87744542900808, -243.6847569630333), 'class': 'readXLS', 'name': '1min'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '1) STD', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.3029', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (-21.842378481516732, -67.68594954114322), 'bypass': False}, 'pos': (-21.842378481516732, -67.68594954114322), 'class': 'tidalEfficiency', 'name': u'tidalEfficiency.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'Generated GW1'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'Generated GW1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (255, 85, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (631.1266347510759, 90.68861206889818), 'bypass': False}, 'pos': (631.1266347510759, 90.68861206889818), 'class': 'makeTimeseriesCurve', 'name': 'gw1_gen'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
