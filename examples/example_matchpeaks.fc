pos: (0.0, 0.0)
connects: [(u'PythonEval.0', 'output', u'QuickView.3', 'In'), (u'detectPeaks_ts.0', 'peaks', 'GW_1-view.3', 'In'), (u'detectPeaks_ts.1', 'peaks', u'QuickView.1', 'In'), ('readCSV.1', 'output', u'PythonEval.0', 'input'), (u'detectPeaks_ts.1', 'peaks', u'matchpeaks.0', 'W_peaks'), (u'PythonEval.0', 'output', u'detectPeaks_ts.2', 'In'), (u'matchpeaks.1', 'matched', u'QuickView.4', 'In'), (u'matchpeaks.0', 'matched', u'QuickView.2', 'In'), ('readCSV.1', 'output', u'detectPeaks_ts.1', 'In'), (u'detectPeaks_ts.0', 'peaks', u'matchpeaks.0', 'GW_peaks'), (u'detectPeaks_ts.2', 'peaks', u'matchpeaks.1', 'GW_peaks'), ('readCSV.1', 'output', 'QuickView.0', 'In'), ('readCSV.1', 'output', u'detectPeaks_ts.0', 'In'), (u'detectPeaks_ts.1', 'peaks', u'matchpeaks.1', 'W_peaks')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (261.0296991500918, 292.24218190027244)
    bypass: False
nodes: [{'state': {'pos': (-508.4048780312711, 40.60450363652433), 'bypass': False}, 'pos': (-508.4048780312711, 40.60450363652433), 'class': 'QuickView', 'name': 'GW_1-view.3'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('column', {'expanded': True, 'name': 'column', 'limits': ['GW_1', 'GW_2', 'GW_3', 'GW_4', 'GW_5', 'GW_6', 'W_1', 'Unnamed: 8'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': None, 'renamable': False, 'value': 'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [None, 'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 30, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}), ('Period Check Params', {'expanded': True, 'name': 'Period Check Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours. If `None`, will calculate\nthe Period `T` as the mean of difference between peaks, multiplied\nby two (i.e. T = peaks["time"].diff().mean()*2)', 'removable': False, 'type': 'str'}), ('hMargin', {'expanded': True, 'name': 'hMargin', 'limits': (0, 10000000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 2, 'visible': True, 'readonly': False, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - hMargin < T_i/2 < T/2 + hMargin', 'removable': False, 'type': 'int'}), ('Errors', {'expanded': True, 'name': 'Errors', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': True, 'tip': 'Number of errors detected after detecting peaks.\nErrors are raised where period condition is not met.\tHit `Plot` button to visualize errors', 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-507.7712119050618, -73.00686312152459), 'bypass': False}, 'pos': (-507.7712119050618, -73.00686312152459), 'class': 'detectPeaks_ts', 'name': u'detectPeaks_ts.0'}, {'state': {'pos': (-247.80853807371642, -254.6193967287361), 'bypass': False}, 'pos': (-247.80853807371642, -254.6193967287361), 'class': 'QuickView', 'name': u'QuickView.2'}, {'state': {'pos': (-681.8090519357022, 313.1110426277377), 'bypass': False}, 'pos': (-681.8090519357022, 313.1110426277377), 'class': 'QuickView', 'name': u'QuickView.3'}, {'state': {'pos': (-842.5519581844056, -294.9009846345521), 'bypass': False}, 'pos': (-842.5519581844056, -294.9009846345521), 'class': 'QuickView', 'name': 'QuickView.0'}, {'state': {'pos': (-520.6458478408388, -390.1827230034687), 'bypass': False}, 'pos': (-520.6458478408388, -390.1827230034687), 'class': 'QuickView', 'name': u'QuickView.1'}, {'state': {'pos': (-246.9240561520014, 59.53529796262876), 'bypass': False}, 'pos': (-246.9240561520014, 59.53529796262876), 'class': 'QuickView', 'name': u'QuickView.4'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('column', {'expanded': True, 'name': 'column', 'limits': ['GW_1', 'GW_2', 'GW_3', 'GW_4', 'GW_5', 'GW_6', 'W_1', 'Unnamed: 8'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': None, 'renamable': False, 'value': 'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [None, 'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 30, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}), ('Period Check Params', {'expanded': True, 'name': 'Period Check Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours. If `None`, will calculate\nthe Period `T` as the mean of difference between peaks, multiplied\nby two (i.e. T = peaks["time"].diff().mean()*2)', 'removable': False, 'type': 'str'}), ('hMargin', {'expanded': True, 'name': 'hMargin', 'limits': (0, 10000000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - hMargin < T_i/2 < T/2 + hMargin', 'removable': False, 'type': 'int'}), ('Errors', {'expanded': True, 'name': 'Errors', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': 2, 'visible': True, 'readonly': True, 'tip': 'Number of errors detected after detecting peaks.\nErrors are raised where period condition is not met.\tHit `Plot` button to visualize errors', 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-516.5374075799388, 207.95880960730165), 'bypass': False}, 'pos': (-516.5374075799388, 207.95880960730165), 'class': 'detectPeaks_ts', 'name': u'detectPeaks_ts.2'}, {'state': {'text': "# Access inputs as args['input_name']\nfrom lib.flowchart.package import Package\n\ndf = args['input'].unpack().copy(deep=True)\n\ndf = df[500::]\n\nreturn {'output': Package(df)} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-681.8916174547592, 209.93404158485038), 'bypass': False}, 'pos': (-681.8916174547592, 209.93404158485038), 'class': 'PythonEval', 'name': u'PythonEval.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Match Option', {'expanded': True, 'name': 'Match Option', 'limits': ['Closest Time'], 'strictNaming': False, 'default': 'Closest Time', 'tip': 'Match option:\n"Closest Time" - match gw_peaks which have closest datetime to w_peaks', 'title': None, 'renamable': False, 'value': 'Closest Time', 'visible': True, 'readonly': False, 'values': ['Closest Time'], 'removable': False, 'type': 'list', 'enabled': True}), ('Closest Time', {'expanded': True, 'name': 'Closest Time', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Column', {'expanded': True, 'name': 'Match Column', 'limits': [None, 'time_min', 'time_max'], 'strictNaming': False, 'default': None, 'tip': 'Data will be matched based on this column', 'title': None, 'renamable': False, 'value': 'time_min', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('side', {'expanded': True, 'name': 'side', 'limits': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'strictNaming': False, 'default': 'right (>=t)', 'tip': 'search direction with respect to `t`.\n"right (>=t)"  - search after or at `t`\n"right (>t)" - search after `t`\n"left (<=t)" - search before or at `t`\n"left (<t)" - search before `t`\n"both"  - search before and after `t` or at `t`', 'title': None, 'renamable': False, 'value': 'right (>=t)', 'visible': True, 'readonly': False, 'values': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'removable': False, 'type': 'list', 'enabled': True}), ('use_window', {'expanded': True, 'name': 'use_window', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Search matching peaks within time-window\n[t-window : t+window]\nEnables `window` float spinbox', 'removable': False, 'type': 'bool'}), ('window', {'expanded': True, 'name': 'window', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': 'Is read only if `use_window` is checked!\nNumber of hours to determine time-window', 'removable': False, 'type': 'float'})])}), ('MATCHED/PEAKS', {'expanded': True, 'name': 'MATCHED/PEAKS', 'strictNaming': False, 'default': '?/?', 'enabled': True, 'title': None, 'renamable': False, 'value': '11/11', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (-248.28573974507185, 173.91671978054188), 'bypass': False}, 'pos': (-248.28573974507185, 173.91671978054188), 'class': 'matchpeaks', 'name': u'matchpeaks.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('column', {'expanded': True, 'name': 'column', 'limits': ['GW_1', 'GW_2', 'GW_3', 'GW_4', 'GW_5', 'GW_6', 'W_1', 'Unnamed: 8'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': None, 'renamable': False, 'value': 'W_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [None, 'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 20, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}), ('Period Check Params', {'expanded': True, 'name': 'Period Check Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours. If `None`, will calculate\nthe Period `T` as the mean of difference between peaks, multiplied\nby two (i.e. T = peaks["time"].diff().mean()*2)', 'removable': False, 'type': 'str'}), ('hMargin', {'expanded': True, 'name': 'hMargin', 'limits': (0, 10000000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - hMargin < T_i/2 < T/2 + hMargin', 'removable': False, 'type': 'int'}), ('Errors', {'expanded': True, 'name': 'Errors', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': 3, 'visible': True, 'readonly': True, 'tip': 'Number of errors detected after detecting peaks.\nErrors are raised where period condition is not met.\tHit `Plot` button to visualize errors', 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-523.5600624846481, -271.9815625735097), 'bypass': False}, 'pos': (-523.5600624846481, -271.9815625735097), 'class': 'detectPeaks_ts', 'name': u'detectPeaks_ts.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/FARGE_project_work/data/SLICED_171020141500_130420150600/hydrographs/Farge-ALL_10min.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': '.', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': ';', 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'1', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u'[0]', 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u"lambda x: datetime.strptime(x, '%d.%m.%Y %H:%M')", 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'800', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'---', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-842.4104760680194, -189.42794676486838), 'bypass': False}, 'pos': (-842.4104760680194, -189.42794676486838), 'class': 'readCSV', 'name': 'readCSV.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Match Option', {'expanded': True, 'name': 'Match Option', 'limits': ['Closest Time'], 'strictNaming': False, 'default': 'Closest Time', 'tip': 'Match option:\n"Closest Time" - match gw_peaks which have closest datetime to w_peaks', 'title': None, 'renamable': False, 'value': 'Closest Time', 'visible': True, 'readonly': False, 'values': ['Closest Time'], 'removable': False, 'type': 'list', 'enabled': True}), ('Closest Time', {'expanded': True, 'name': 'Closest Time', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Column', {'expanded': True, 'name': 'Match Column', 'limits': [None, 'time_min', 'time_max'], 'strictNaming': False, 'default': None, 'tip': 'Data will be matched based on this column', 'title': None, 'renamable': False, 'value': 'time_min', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('side', {'expanded': True, 'name': 'side', 'limits': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'strictNaming': False, 'default': 'right (>=t)', 'tip': 'search direction with respect to `t`.\n"right (>=t)"  - search after or at `t`\n"right (>t)" - search after `t`\n"left (<=t)" - search before or at `t`\n"left (<t)" - search before `t`\n"both"  - search before and after `t` or at `t`', 'title': None, 'renamable': False, 'value': 'right (>=t)', 'visible': True, 'readonly': False, 'values': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'removable': False, 'type': 'list', 'enabled': True}), ('use_window', {'expanded': True, 'name': 'use_window', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'Search matching peaks within time-window\n[t-window : t+window]\nEnables `window` float spinbox', 'removable': False, 'type': 'bool'}), ('window', {'expanded': True, 'name': 'window', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 2.0, 'visible': True, 'readonly': False, 'tip': 'Is read only if `use_window` is checked!\nNumber of hours to determine time-window', 'removable': False, 'type': 'float'})])}), ('MATCHED/PEAKS', {'expanded': True, 'name': 'MATCHED/PEAKS', 'strictNaming': False, 'default': '?/?', 'enabled': True, 'title': None, 'renamable': False, 'value': '11/11', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (-248.2317046818588, -149.8613790161969), 'bypass': False}, 'pos': (-248.2317046818588, -149.8613790161969), 'class': 'matchpeaks', 'name': u'matchpeaks.0'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (116.90742824277936, 269.6106379607305)
    bypass: False
