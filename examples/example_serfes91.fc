pos: (0.0, 0.0)
connects: [('Serfes.0', 'output', u'viewPandasDf.1', 'In'), ('GaussianFilter.0', 'Out', 'Output', 'dataOut'), ('Region Select.0', 'o_gw2a', 'PlotCurve.1', 'y'), ('Region Select.0', 'o_time', '2timestep', 'input'), (u'ColumnSelect.0', 'Datetime', 'Region Select.0', 'time'), ('PlotCurve.1', 'plot', 'PlotArray.0', 'Array'), ('2timestep', 'output', 'PlotCurve.3', 'x'), (u'ColumnSelect.0', 'GW_2_timeAverage', 'Region Select.0', 'gw2a'), ('Serfes.0', 'output', u'df2recArray.1', 'In'), (u'ColumnSelect.0', 'GW_2', 'Region Select.0', 'gw2'), ('2timestep', 'output', 'PlotCurve.1', 'x'), ('PlotCurve.3', 'plot', 'PlotArray.0', 'Array'), ('Input', 'dataIn', 'PlotWidget.0', 'In'), ('Input', 'dataIn', 'GaussianFilter.0', 'In'), (u'df2recArray.1', 'Out', u'ColumnSelect.0', 'In'), ('readCSV.1', 'output', 'viewPandasDf.0', 'In'), ('readCSV.1', 'output', 'Serfes.0', 'input'), ('Region Select.0', 'o_gw2', 'PlotCurve.3', 'y')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (261.0296991500918, 292.24218190027244)
    bypass: False
nodes: [{'state': {'pos': (195.95415141162454, 284.66284251503623), 'bypass': False, 'ctrl': {'sigma': 5.0}}, 'pos': (195.95415141162454, 284.66284251503623), 'class': 'GaussianFilter', 'name': 'GaussianFilter.0'}, {'state': {'pos': (30.113247644754836, 282.5950146535861), 'bypass': False}, 'pos': (30.113247644754836, 282.5950146535861), 'class': 'PlotWidget', 'name': 'PlotWidget.0'}, {'state': {'pos': (-704.0516198353197, -644.7222613458279), 'bypass': False}, 'pos': (-704.0516198353197, -644.7222613458279), 'class': 'viewPandasDf', 'name': 'viewPandasDf.0'}, {'state': {'pos': (-564.9607574212314, -637.5537404988747), 'bypass': False}, 'pos': (-564.9607574212314, -637.5537404988747), 'class': 'viewPandasDf', 'name': u'viewPandasDf.1'}, {'state': {'pos': (480.91033399783703, -511.6240749996624), 'bypass': False}, 'pos': (480.91033399783703, -511.6240749996624), 'class': 'PlotArray', 'name': 'PlotArray.0'}, {'state': {'text': "# Access inputs as args['input_name']\nimport copy\n\n\ngw2 = args['gw2']\ngw2a =args['gw2a']\nt = args['time']\n\nreturn {'o_time': t[250:-250], 'o_gw2': gw2[250:-250], 'o_gw2a': gw2a[250:-250]} ## one key per output terminal", 'terminals': OrderedDict([('gw2', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('gw2a', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('time', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('o_gw2a', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('o_gw2', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': False, 'removable': True, 'optional': False}), ('o_time', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': False, 'removable': True, 'optional': False})]), 'pos': (-128.74806159178883, -519.693443395601), 'bypass': False}, 'pos': (-128.74806159178883, -519.693443395601), 'class': 'PythonEval', 'name': 'Region Select.0'}, {'state': {'columns': ['GW_2_timeAverage', 'GW_2', 'Datetime'], 'pos': (-283.9252394190863, -520.0940714274187), 'bypass': False}, 'pos': (-283.9252394190863, -520.0940714274187), 'class': 'ColumnSelect', 'name': u'ColumnSelect.0'}, {'state': {'text': "return{'output': args['input'].astype(np.int64)//10**9-60*60 }\n\n", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (59.9557093039125, -519.255786899223), 'bypass': False}, 'pos': (59.9557093039125, -519.255786899223), 'class': 'PythonEval', 'name': '2timestep'}, {'state': {'pos': (317.23289530510783, -343.1852456796428), 'bypass': False, 'ctrl': {'color': (128, 128, 128, 255)}}, 'pos': (317.23289530510783, -343.1852456796428), 'class': 'PlotCurve', 'name': 'PlotCurve.3'}, {'state': {'pos': (296.983961495876, -658.3981786394168), 'bypass': False, 'ctrl': {'color': (255, 255, 0, 255)}}, 'pos': (296.983961495876, -658.3981786394168), 'class': 'PlotCurve', 'name': 'PlotCurve.1'}, {'state': {'pos': (-428.26000014807363, -518.8843584358024), 'bypass': False}, 'pos': (-428.26000014807363, -518.8843584358024), 'class': 'df2recArray', 'name': u'df2recArray.1'}, {'state': {'text': "# Access inputs as args['input_name']\n\nfrom lib.functions import filterSerfes1991 as serfes\nfrom pyqtgraph import BusyCursor\nfrom lib.flowchart.package import Package\nimport copy\n\n\n\ndata = copy.deepcopy(args['input'].unpack())\n\nwith BusyCursor():\n    result = serfes.filter_wl_71h_serfes1991(data,\n        datetime='Datetime',\n        N=None,\n        usecols=['GW_2'],\n        log=True)\n\n\nreturn {'output': Package(result)} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-563.9223359532525, -517.4648210951771), 'bypass': False}, 'pos': (-563.9223359532525, -517.4648210951771), 'class': 'PythonEval', 'name': 'Serfes.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/TESTDATA.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': '.', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': ';', 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'1', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u'[0]', 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u"lambda x: datetime.strptime(x, '%d.%m.%Y %H:%M')", 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'10000', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'---', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'[0, 1, 2, 3, 4, 5, 6, 7]', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-705.1469910566296, -516.0405857796867), 'bypass': False}, 'pos': (-705.1469910566296, -516.0405857796867), 'class': 'readCSV', 'name': 'readCSV.1'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (116.90742824277936, 269.6106379607305)
    bypass: False
