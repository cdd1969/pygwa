pos: (0.0, 0.0)
connects: [(u'Drop NaNs.0', 'Out', u'Quick View.0', 'In'), ('Hydraulic Gradient.1', 'All', u'Make Curve.1', 'df'), (u'Make Curve.0', 'Curve', u'Plot Curves.0', 'Curves'), (u'Make Curve.1', 'Curve', u'Plot Curves.0', 'Curves'), ('Well data', 'output', u'Hydraulic Gradient.0', 'data'), (u'Drop NaNs.0', 'Out', 'Hydraulic Gradient.1', 'data'), ('Well data', 'output', u'Serfes Filter.0', 'In'), ('Read Coords.1', 'output', 'Hydraulic Gradient.1', 'coord'), (u'Hydraulic Gradient.0', 'All', u'Make Curve.0', 'df'), (u'Serfes Filter.0', 'Out', u'Drop NaNs.0', 'In'), ('Read Coords', 'output', u'Hydraulic Gradient.0', 'coord')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': ['direction(degrees North)', 'gradient'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': 'direction(degrees North)', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (255, 255, 0, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (765.925660524063, 234.74514530444088), 'bypass': False}, 'pos': (765.925660524063, 234.74514530444088), 'class': 'Make Curve', 'name': u'Make Curve.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': ['direction(degrees North)', 'gradient'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': 'direction(degrees North)', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (85, 170, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (763.0898083442961, 437.035934127803), 'bypass': False}, 'pos': (763.0898083442961, 437.035934127803), 'class': 'Make Curve', 'name': u'Make Curve.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime', None], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.\nBy default is `None`, meaning that datetime objects are\nlocated within `pd.DataFrame.index`. If not `None` - pass the\ncolumn-name of dataframe where datetime objects are located.\nThis is needed to determine number of measurements per day.\nNote: this argument is ignored if `N` is not `None` !!!', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('N', {'expanded': True, 'name': 'N', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 144, 'visible': True, 'readonly': False, 'tip': '<int or None>\nExplicit number of measurements in 24 hours. By\ndefault `N=None`, meaning that script will try to determine\nnumber of measurements per 24 hours based on real datetime\ninformation provided with `datetime` argument', 'removable': False, 'type': 'str'}), ('Calculate N', {'expanded': True, 'name': 'Calculate N', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('verbose', {'expanded': True, 'name': 'verbose', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If `True` - will keep all three iterations\nin the output. If `False` - will save only final (3rd) iteration.\nThis may useful for debugging, or checking this filter.', 'removable': False, 'type': 'bool'}), ('keep_origin', {'expanded': True, 'name': 'keep_origin', 'strictNaming': False, 'default': True, 'enabled': True, 'title': 'Keep Original Data', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If `True` - will keep original data and append new columns with results.\nIf `False` - will create new table only with results.', 'removable': False, 'type': 'bool'}), ('log', {'expanded': True, 'name': 'log', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'tip': 'flag to show some prints in console', 'removable': False, 'type': 'bool'}), ('Apply to columns', {'expanded': True, 'name': 'Apply to columns', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([(u'GW_1', {'expanded': True, 'name': u'GW_1', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_2', {'expanded': True, 'name': u'GW_2', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_3', {'expanded': True, 'name': u'GW_3', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_4', {'expanded': True, 'name': u'GW_4', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'River', {'expanded': True, 'name': u'River', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'})])}), ('Apply Filter', {'expanded': True, 'name': 'Apply Filter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (148.0153727735547, 97.75189973193204), 'bypass': False}, 'pos': (148.0153727735547, 97.75189973193204), 'class': 'Serfes Filter', 'name': u'Serfes Filter.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 'examples/data/test_coords.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-23.5079898459947, 519.1662025430435), 'bypass': False}, 'pos': (-23.5079898459947, 519.1662025430435), 'class': 'Read XLS', 'name': 'Read Coords'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('coords_grp', {'expanded': True, 'name': 'coords_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Well X/Y coordinates', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x', {'expanded': True, 'name': 'x', 'limits': [u'x', u'y'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'x', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <coord> dataframe with x-coordinates', 'values': [None], 'removable': False, 'type': 'list'}), ('y', {'expanded': True, 'name': 'y', 'limits': [u'x', u'y'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'y', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <coord> dataframe with y-coordinates', 'values': [None], 'removable': False, 'type': 'list'})])}), ('Datetime', {'expanded': True, 'name': 'Datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <data> dataframe with datetime', 'values': [None], 'removable': False, 'type': 'list'}), ('t', {'expanded': True, 'name': 't', 'strictNaming': False, 'default': 'YYYY-MM-DD HH:MM:SS', 'enabled': True, 'title': 'Timestep', 'renamable': False, 'value': u'2015-01-03 00:00:00', 'visible': True, 'readonly': False, 'tip': 'Datetime of a single timestep to be calculated in format YYYY-MM-DD HH:MM:SS', 'removable': False, 'type': 'str'}), ('grad', {'expanded': True, 'name': 'grad', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Gradient', 'renamable': False, 'value': 0.0038783464743189673, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float'}), ('angle', {'expanded': True, 'name': 'angle', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Direction', 'renamable': False, 'value': 47.618983340341345, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float', 'suffix': ' degrees N'}), ('Calculate\nall timesteps', {'expanded': True, 'name': 'Calculate\nall timesteps', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (608.6379563244775, 148.36576113600907), 'bypass': False}, 'pos': (608.6379563244775, 148.36576113600907), 'class': 'Hydraulic Gradient', 'name': 'Hydraulic Gradient.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 'examples/data/test_coords_serfes.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (351.5206920256269, 210.75450909087868), 'bypass': False}, 'pos': (351.5206920256269, 210.75450909087868), 'class': 'Read XLS', 'name': 'Read Coords.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('coords_grp', {'expanded': True, 'name': 'coords_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Well X/Y coordinates', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x', {'expanded': True, 'name': 'x', 'limits': [u'x', u'y', u'z'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'x', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <coord> dataframe with x-coordinates', 'values': [None], 'removable': False, 'type': 'list'}), ('y', {'expanded': True, 'name': 'y', 'limits': [u'x', u'y', u'z'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'y', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <coord> dataframe with y-coordinates', 'values': [None], 'removable': False, 'type': 'list'})])}), ('Datetime', {'expanded': True, 'name': 'Datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'tip': 'Name of the column in <data> dataframe with datetime', 'values': [None], 'removable': False, 'type': 'list'}), ('t', {'expanded': True, 'name': 't', 'strictNaming': False, 'default': 'YYYY-MM-DD HH:MM:SS', 'enabled': True, 'title': 'Timestep', 'renamable': False, 'value': '2015-01-01 00:00:00', 'visible': True, 'readonly': False, 'tip': 'Datetime of a single timestep to be calculated in format YYYY-MM-DD HH:MM:SS', 'removable': False, 'type': 'str'}), ('grad', {'expanded': True, 'name': 'grad', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Gradient', 'renamable': False, 'value': 0.014389271821928997, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float'}), ('angle', {'expanded': True, 'name': 'angle', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Direction', 'renamable': False, 'value': 56.343035396841515, 'visible': True, 'readonly': True, 'removable': False, 'type': 'float', 'suffix': ' degrees N'}), ('Calculate\nall timesteps', {'expanded': True, 'name': 'Calculate\nall timesteps', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (188.23563957658882, 479.4642720263075), 'bypass': False}, 'pos': (188.23563957658882, 479.4642720263075), 'class': 'Hydraulic Gradient', 'name': u'Hydraulic Gradient.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Water level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': u'degrees North', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (904.8824173326343, 361.41320933402267), 'bypass': False}, 'pos': (904.8824173326343, 361.41320933402267), 'class': 'Plot Curves', 'name': u'Plot Curves.0'}, {'state': {'pos': (353.7818103979609, -8.192858095577279), 'bypass': False}, 'pos': (353.7818103979609, -8.192858095577279), 'class': 'Quick View', 'name': u'Quick View.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'examples/data/test_data.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-29.598292512655874, 345.5100739811868), 'bypass': False}, 'pos': (-29.598292512655874, 345.5100739811868), 'class': 'Read XLS', 'name': 'Well data'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': []}, 'pos': (354.60563412290435, 99.46007993756461), 'bypass': False}, 'pos': (354.60563412290435, 99.46007993756461), 'class': 'Drop NaNs', 'name': u'Drop NaNs.0'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
