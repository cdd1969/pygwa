pos: (0.0, 0.0)
connects: [(u'Hydraulic Gradient (v2).0', 'All', u'Quick View.2', 'In'), (u'Serfes Filter.0', 'Out', 'plot.1', 'data'), ('data', 'output', 'Quick View.0', 'In'), (u'Serfes Filter.0', 'Out', u'Drop NaNs.0', 'In'), ('data', 'output', u'Serfes Filter.0', 'In'), (u'Serfes Filter.0', 'Out', 'Quick View.1', 'In'), (u'Hydraulic Gradient (v2).0', 'All', 'plot.0', 'grad'), ('coords', 'output', u'Hydraulic Gradient (v2).0', 'coord'), (u'Drop NaNs.0', 'Out', 'plot.0', 'data'), (u'Drop NaNs.0', 'Out', u'Hydraulic Gradient (v2).0', 'data'), (u'Hydraulic Gradient (v2).0', 'All', u'Plot Histogram.0', 'In')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime', None], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.\nBy default is `None`, meaning that datetime objects are\nlocated within `pd.DataFrame.index`. If not `None` - pass the\ncolumn-name of dataframe where datetime objects are located.\nThis is needed to determine number of measurements per day.\nNote: this argument is ignored if `N` is not `None` !!!', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('N', {'expanded': True, 'name': 'N', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 144, 'visible': True, 'readonly': False, 'tip': '<int or None>\nExplicit number of measurements in 24 hours. By\ndefault `N=None`, meaning that script will try to determine\nnumber of measurements per 24 hours based on real datetime\ninformation provided with `datetime` argument', 'removable': False, 'type': 'str'}), ('Calculate N', {'expanded': True, 'name': 'Calculate N', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('verbose', {'expanded': True, 'name': 'verbose', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If `True` - will keep all three iterations\nin the output. If `False` - will save only final (3rd) iteration.\nThis may useful for debugging, or checking this filter.', 'removable': False, 'type': 'bool'}), ('keep_origin', {'expanded': True, 'name': 'keep_origin', 'strictNaming': False, 'default': True, 'enabled': True, 'title': 'Keep Original Data', 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'If `True` - will keep original data and append new columns with results.\nIf `False` - will create new table only with results.', 'removable': False, 'type': 'bool'}), ('log', {'expanded': True, 'name': 'log', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'tip': 'flag to show some prints in console', 'removable': False, 'type': 'bool'}), ('Apply to columns', {'expanded': True, 'name': 'Apply to columns', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([(u'GW_1', {'expanded': True, 'name': u'GW_1', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_2', {'expanded': True, 'name': u'GW_2', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_3', {'expanded': True, 'name': u'GW_3', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_4', {'expanded': True, 'name': u'GW_4', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_5', {'expanded': True, 'name': u'GW_5', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'GW_6', {'expanded': True, 'name': u'GW_6', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), (u'Weser', {'expanded': True, 'name': u'Weser', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'})])}), ('Apply Filter', {'expanded': True, 'name': 'Apply Filter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-270.0959959870802, 46.70190592699478), 'bypass': False}, 'pos': (-270.0959959870802, 46.70190592699478), 'class': 'Serfes Filter', 'name': u'Serfes Filter.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Signal', {'expanded': True, 'name': 'Signal', 'limits': ['direction(degrees North)', 'gradient'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with an array to be evaluated', 'title': None, 'renamable': False, 'value': 'direction(degrees North)', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Signal Units', {'expanded': True, 'name': 'Signal Units', 'strictNaming': False, 'default': u'', 'enabled': True, 'title': None, 'renamable': False, 'value': u'm AMSL', 'visible': True, 'readonly': False, 'tip': 'Units of the `Signal` to be displayed', 'removable': False, 'type': 'str'}), ('Histogram Type', {'expanded': True, 'name': 'Histogram Type', 'limits': ['Frequency', 'Relative Frequency', 'Normalized'], 'strictNaming': False, 'default': 'Frequency', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Frequency', 'visible': True, 'readonly': False, 'tip': 'Type of the histogram.', 'values': ['Frequency', 'Relative Frequency', 'Normalized'], 'removable': False, 'type': 'list'}), ('Bins', {'expanded': True, 'name': 'Bins', 'limits': (1, 200), 'strictNaming': False, 'default': 10, 'tip': 'Number of bins for building histogram', 'title': None, 'renamable': False, 'readonly': False, 'value': 10, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('Bin Width', {'expanded': True, 'name': 'Bin Width', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '35.885', 'visible': True, 'readonly': True, 'tip': 'Bin width', 'removable': False, 'type': 'str'}), ('Max', {'expanded': True, 'name': 'Max', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '359.069', 'visible': True, 'readonly': True, 'tip': 'Maximum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Min', {'expanded': True, 'name': 'Min', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.221', 'visible': True, 'readonly': True, 'tip': 'Minimum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Mean', {'expanded': True, 'name': 'Mean', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '73.222', 'visible': True, 'readonly': True, 'tip': 'Mean value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Median', {'expanded': True, 'name': 'Median', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '61.598', 'visible': True, 'readonly': True, 'tip': 'Median value of passed `Signal`', 'removable': False, 'type': 'str'}), ('STD', {'expanded': True, 'name': 'STD', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '53.936', 'visible': True, 'readonly': True, 'tip': 'Standard deviation of passed `Signal`', 'removable': False, 'type': 'str'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (306.23116771327966, 104.90694043117674), 'bypass': False}, 'pos': (306.23116771327966, 104.90694043117674), 'class': 'Plot Histogram', 'name': u'Plot Histogram.0'}, {'state': {'pos': (308.6326954945953, 226.24201647955027), 'bypass': False}, 'pos': (308.6326954945953, 226.24201647955027), 'class': 'Quick View', 'name': u'Quick View.2'}, {'state': {'text': "# Access inputs as args['input']\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf1 = args['data']\ndf2 = args['grad']\n\n\nfig, axarr = plt.subplots(2)\nax1 = axarr[0]\nax2 = axarr[1]\n\ny1 ='Weser_mean'\ny2 = 'gradient'\ny3 = 'direction(degrees North)'\nx = 'Datetime'\ndf1.plot(x=x, y=y1, ax=ax1)\ndf2.plot(x=x, y=y2, ax=ax2)\ndf2.plot(x=x, y=y3, ax=ax2, secondary_y=True)\n\nax2.right_ax.set_ylim(0, 360)\n\n\n# setting legend labels\nxlabel = 'Datetime'\naxeslabel_fontsize = 20\ntitle_fontsize = 25\naxesvalues_fontsize = 20\nlegend_fontsize = 20\n\nfor ax, ylabel in zip(\n\t(ax1, ax2, ax2.right_ax),\n\t('Mean River Stage [m AMSL]', 'Gradient Magnituge [-]', 'Gradient Bearing [degrees]')\n\t):\n\tax.xaxis.grid(True, which='major')\n\tax.yaxis.grid(True, which='both')\n\tax.set_xlabel(xlabel, fontsize=axeslabel_fontsize)\n\tax.set_ylabel(ylabel, fontsize=axeslabel_fontsize)\n\t#ax.set_title(title, fontsize=title_fontsize)\n\tax.tick_params(axis='both', labelsize=axesvalues_fontsize)\n\tif ax not in [ax2.right_ax]:\n\t\t#handles, labels = ax.get_legend_handles_labels()\n\t\t#ax.legend(handles, labels, fontsize=legend_fontsize)\n\t\tplt.setp(ax.get_legend().get_texts(), fontsize=legend_fontsize) #legend 'list' fontsize\n\nfig.show()\nreturn {'output': None} ## one key per output terminal", 'terminals': OrderedDict([('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('grad', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('data', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False})]), 'pos': (307.3958665461097, -21.539317759241953), 'bypass': False}, 'pos': (307.3958665461097, -21.539317759241953), 'class': 'PythonEval', 'name': 'plot.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '/home/nck/prj/master_thesis/farge/coords.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': u'145_mean', 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-112.80595229470507, 169.2142639190326), 'bypass': False}, 'pos': (-112.80595229470507, 169.2142639190326), 'class': 'Read XLS', 'name': 'coords'}, {'state': {'text': "# Access inputs as args['input']\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndf1 = args['data']\n\nPLOT = True  # flag to do the plotting\nif PLOT:\n\tfig, ax = plt.subplots()\n\n\ty1 ='Weser_mean'\n\ty2 = 'Weser'\n\tx = 'Datetime'\n\n\tdf1.plot(x=x, y=y2, ax=ax)\n\tdf1.plot(x=x, y=y1, ax=ax, style='#DC143C')\n\t\n\t# setting legend labels\n\tylabel = 'River Stage [m AMSL]'\n\txlabel = 'Datetime'\n\taxeslabel_fontsize = 20\n\ttitle_fontsize = 25\n\taxesvalues_fontsize = 20\n\tlegend_fontsize = 20\n\n\thandles, labels = ax.get_legend_handles_labels()\n\tax.legend(handles, labels, fontsize=legend_fontsize)\n\tax.xaxis.grid(True, which='major')\n\tax.yaxis.grid(True, which='both')\n\tax.set_xlabel(xlabel, fontsize=axeslabel_fontsize)\n\tax.set_ylabel(ylabel, fontsize=axeslabel_fontsize)\n\t#ax.set_title(title, fontsize=title_fontsize)\n\tax.tick_params(axis='both', labelsize=axesvalues_fontsize)\n\n\tfig.show()\nreturn {'output': None} ## one key per output terminal", 'terminals': OrderedDict([('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('grad', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('data', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False})]), 'pos': (-270.4646623261816, -168.78240739127986), 'bypass': False}, 'pos': (-270.4646623261816, -168.78240739127986), 'class': 'PythonEval', 'name': 'plot.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': []}, 'pos': (-114.85824824276804, 48.49656197028153), 'bypass': False}, 'pos': (-114.85824824276804, 48.49656197028153), 'class': 'Drop NaNs', 'name': u'Drop NaNs.0'}, {'state': {'pos': (140.2491492826905, 147.24575638060327), 'bypass': False}, 'pos': (140.2491492826905, 147.24575638060327), 'class': 'Hydraulic Gradient (v2)', 'name': u'Hydraulic Gradient (v2).0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '/home/nck/prj/master_thesis/farge/data_farge.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'0', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': u'20000', 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-445.2054955885392, 45.892149668116474), 'bypass': False}, 'pos': (-445.2054955885392, 45.892149668116474), 'class': 'Read XLS', 'name': 'data'}, {'state': {'pos': (-439.19143118860984, -75.55970703093196), 'bypass': False}, 'pos': (-439.19143118860984, -75.55970703093196), 'class': 'Quick View', 'name': 'Quick View.0'}, {'state': {'pos': (-269.2038402761281, -63.64614007322635), 'bypass': False}, 'pos': (-269.2038402761281, -63.64614007322635), 'class': 'Quick View', 'name': 'Quick View.1'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
