pos: (0.0, 0.0)
connects: [('gen sig gw4', 'sig', 'gen GW4', 'df'), ('gen sig gw2', 'sig', 'RMSE', 'pred'), (u'Pipe.1', 'Out', 'GW3', 'df'), (u'Pipe.1', 'Out', 'RMSE', 'targ'), ('GW4', 'Curve', "Plot gw4's", 'Curves'), ('gen GW3', 'Curve', "Plot gw3's", 'Curves'), ('GW2', 'Curve', "Plot gw2's", 'Curves'), (u'FFT.0', 'params', 'gen sig gw3', 'tides'), ('Read data', 'output', u'FFT.0', 'In'), (u'Pipe.1', 'Out', 'GW4', 'df'), ('gen sig gw2', 'sig', 'gen GW2 E', 'df'), ('GW3', 'Curve', "Plot gw3's", 'Curves'), (u'Pipe.1', 'Out', 'GW2', 'df'), ('gen GW2 E', 'Curve', "Plot gw2's", 'Curves'), (u'FFT.0', 'params', 'gen sig gw4', 'tides'), (u'FFT.0', 'params', 'gen sig gw2', 'tides'), ('Read data', 'output', u'Pipe.1', 'In'), ('gen GW4', 'Curve', "Plot gw4's", 'Curves'), ('gen sig gw3', 'sig', 'gen GW3', 'df')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('closed', {'expanded': True, 'name': 'closed', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Close Pipe', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If Checked -- close pipe, and do not transmit data further', 'removable': False, 'type': 'bool'})])}, 'pos': (-13.993109955555951, 634.0755647576007), 'bypass': False}, 'pos': (-13.993109955555951, 634.0755647576007), 'class': 'Pipe', 'name': u'Pipe.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'GW_2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (38, 234, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (588.3717255421668, 756.0832275941157), 'bypass': False}, 'pos': (588.3717255421668, 756.0832275941157), 'class': 'Make Curve', 'name': 'GW2'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Water level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': 'm AMSL', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (922.9705183273016, 504.73838291638947), 'bypass': False}, 'pos': (922.9705183273016, 504.73838291638947), 'class': 'Plot Curves', 'name': "Plot gw3's"}, {'state': {'text': "# Access inputs as args['input']\n#import pandas as pd\n\nfrom lib.functions.maths import rmse\n# calculate root mean square error\n\ndf1 = args['pred']\ndf2 = args['targ']\n\npredictions = df1.ix[:,1]  #second column\ntargets = df2['GW_2']\ne = rmse(predictions, targets)\n\n\nreturn {'output': e} ## one key per output terminal", 'terminals': OrderedDict([('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('pred', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('targ', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False})]), 'pos': (574.4753441846109, 585.2749972798346), 'bypass': False}, 'pos': (574.4753441846109, 585.2749972798346), 'class': 'PythonEval', 'name': 'RMSE'}, {'state': {'crtlWidget': {u'sb_main_const': {'max': 99.99, 'value': 0.506, 'min': -99.0}, u'sb_song_ne': {'max': 1.0, 'value': 0.35, 'min': 0.0}, u'sb_xia_a_aq': {'max': 1.0, 'value': 3.2e-09, 'min': None}, u'sb_xia_b_aq': {'max': 10000.0, 'value': 20.0, 'min': 0.0}, u'sb_xia_kf_roof': {'max': 1.0, 'value': 0.0, 'min': None}, u'sb_xia_kf_cap': {'max': 1.0, 'value': 3e-07, 'min': None}, u'sb_timestep': {'max': 600000, 'value': 600, 'min': 60}, u'cb_eq': {'count': 4, 'index': 2, 'items': [u'h(t,tide) [Simple Tide]', u'h(x,t,tide,D) [Ferris 1951]', u'h(x,t,tide,...) [Xia et al. 2007]', u'h(x,t,tide,...) [Song et al. 2007]']}, u'sb_xia_kf_aq': {'max': 1.0, 'value': 0.0001, 'min': 0.0}, u'sb_x': {'max': 10000000.0, 'value': 1.0, 'min': 0.0}, u'sb_main_factor': {'max': 99.99, 'value': 1.0, 'min': 0.0}, u'sb_ferris_d': {'max': 999999.0, 'value': 1.0, 'min': None}, u'dt_end': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Mo. Apr. 13 06:00:00 2015 GMT', 'min': u'Fr. Okt. 17 15:00:00 2014 GMT'}, u'cb_xia_inf_L': {'value': False}, u'sb_song_kf': {'max': 1.0, 'value': 0.0005, 'min': 0.0}, u'sb_xia_b_roof': {'max': 1000.0, 'value': 10.0, 'min': 0.0}, u'sb_xia_ne_aq': {'max': 1.0, 'value': 0.4, 'min': 0.0}, u'dt_start': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Fr. Okt. 17 15:00:00 2014 GMT', 'min': u'Mi. Sep. 13 23:00:00 1752 GMT'}, u'le_label': {'value': u'Simulated GW2'}, u'sb_xia_L_roof': {'max': 10000.0, 'value': 0.0, 'min': 0.0}, u'cb_song_order': {'count': 3, 'index': 0, 'items': [u'3', u'2', u'1']}, u'sb_xia_b_cap': {'max': 1.0, 'value': 1.0, 'min': 0.0}, u'sb_song_b': {'max': 10000.0, 'value': 50.0, 'min': 0.0}}, 'pos': (450.58141106360006, 464.2574942667459), 'bypass': False}, 'pos': (450.58141106360006, 464.2574942667459), 'class': 'Generate Signal (v2)', 'name': 'gen sig gw2'}, {'state': {'crtlWidget': {u'sb_main_const': {'max': 99.99, 'value': 0.506, 'min': -99.0}, u'sb_song_ne': {'max': 1.0, 'value': 0.35, 'min': 0.0}, u'sb_xia_a_aq': {'max': 1.0, 'value': 3.2e-09, 'min': None}, u'sb_xia_b_aq': {'max': 10000.0, 'value': 20.0, 'min': 0.0}, u'sb_xia_kf_roof': {'max': 1.0, 'value': 0.0, 'min': None}, u'sb_xia_kf_cap': {'max': 1.0, 'value': 3e-07, 'min': None}, u'sb_timestep': {'max': 600000, 'value': 600, 'min': 60}, u'cb_eq': {'count': 4, 'index': 2, 'items': [u'h(t,tide) [Simple Tide]', u'h(x,t,tide,D) [Ferris 1951]', u'h(x,t,tide,...) [Xia et al. 2007]', u'h(x,t,tide,...) [Song et al. 2007]']}, u'sb_xia_kf_aq': {'max': 1.0, 'value': 0.0001, 'min': 0.0}, u'sb_x': {'max': 10000000.0, 'value': 11.0, 'min': 0.0}, u'sb_main_factor': {'max': 99.99, 'value': 1.0, 'min': 0.0}, u'sb_ferris_d': {'max': 999999.0, 'value': 1.0, 'min': None}, u'dt_end': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Mo. Apr. 13 06:00:00 2015 GMT', 'min': u'Fr. Okt. 17 15:00:00 2014 GMT'}, u'cb_xia_inf_L': {'value': False}, u'sb_song_kf': {'max': 1.0, 'value': 0.0005, 'min': 0.0}, u'sb_xia_b_roof': {'max': 1000.0, 'value': 10.0, 'min': 0.0}, u'sb_xia_ne_aq': {'max': 1.0, 'value': 0.4, 'min': 0.0}, u'dt_start': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Fr. Okt. 17 15:00:00 2014 GMT', 'min': u'Mi. Sep. 13 23:00:00 1752 GMT'}, u'le_label': {'value': u'Simulated GW3'}, u'sb_xia_L_roof': {'max': 10000.0, 'value': 0.0, 'min': 0.0}, u'cb_song_order': {'count': 3, 'index': 0, 'items': [u'3', u'2', u'1']}, u'sb_xia_b_cap': {'max': 1.0, 'value': 1.0, 'min': 0.0}, u'sb_song_b': {'max': 10000.0, 'value': 50.0, 'min': 0.0}}, 'pos': (447.56857025589295, 358.1151522599192), 'bypass': False}, 'pos': (447.56857025589295, 358.1151522599192), 'class': 'Generate Signal (v2)', 'name': 'gen sig gw3'}, {'state': {'crtlWidget': {u'sb_main_const': {'max': 99.99, 'value': 0.506, 'min': -99.0}, u'sb_song_ne': {'max': 1.0, 'value': 0.35, 'min': 0.0}, u'sb_xia_a_aq': {'max': 1.0, 'value': 3.2e-09, 'min': None}, u'sb_xia_b_aq': {'max': 10000.0, 'value': 20.0, 'min': 0.0}, u'sb_xia_kf_roof': {'max': 1.0, 'value': 0.0, 'min': None}, u'sb_xia_kf_cap': {'max': 1.0, 'value': 3e-07, 'min': None}, u'sb_timestep': {'max': 600000, 'value': 600, 'min': 60}, u'cb_eq': {'count': 4, 'index': 2, 'items': [u'h(t,tide) [Simple Tide]', u'h(x,t,tide,D) [Ferris 1951]', u'h(x,t,tide,...) [Xia et al. 2007]', u'h(x,t,tide,...) [Song et al. 2007]']}, u'sb_xia_kf_aq': {'max': 1.0, 'value': 0.0001, 'min': 0.0}, u'sb_x': {'max': 10000000.0, 'value': 23.0, 'min': 0.0}, u'sb_main_factor': {'max': 99.99, 'value': 1.0, 'min': 0.0}, u'sb_ferris_d': {'max': 999999.0, 'value': 1.0, 'min': None}, u'dt_end': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Mo. Apr. 13 06:00:00 2015 GMT', 'min': u'Fr. Okt. 17 15:00:00 2014 GMT'}, u'cb_xia_inf_L': {'value': False}, u'sb_song_kf': {'max': 1.0, 'value': 0.0005, 'min': 0.0}, u'sb_xia_b_roof': {'max': 1000.0, 'value': 10.0, 'min': 0.0}, u'sb_xia_ne_aq': {'max': 1.0, 'value': 0.4, 'min': 0.0}, u'dt_start': {'max': u'Fr. Dez. 31 22:59:59 7999 GMT', 'value': u'Fr. Okt. 17 15:00:00 2014 GMT', 'min': u'Mi. Sep. 13 23:00:00 1752 GMT'}, u'le_label': {'value': u'Simulated GW4'}, u'sb_xia_L_roof': {'max': 10000.0, 'value': 0.0, 'min': 0.0}, u'cb_song_order': {'count': 3, 'index': 0, 'items': [u'3', u'2', u'1']}, u'sb_xia_b_cap': {'max': 1.0, 'value': 1.0, 'min': 0.0}, u'sb_song_b': {'max': 10000.0, 'value': 50.0, 'min': 0.0}}, 'pos': (442.62807522016465, 242.3345391129874), 'bypass': False}, 'pos': (442.62807522016465, 242.3345391129874), 'class': 'Generate Signal (v2)', 'name': 'gen sig gw4'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': u'Water Level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': 'm AMSL', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (753.1661463029968, 507.54961308535906), 'bypass': False}, 'pos': (753.1661463029968, 507.54961308535906), 'class': 'Plot Curves', 'name': "Plot gw2's"}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'GW_4', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (38, 234, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (584.3930531087268, 982.5436655054045), 'bypass': False}, 'pos': (584.3930531087268, 982.5436655054045), 'class': 'Make Curve', 'name': 'GW4'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'Simulated GW3'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'Simulated GW3', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': ['Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (241, 36, 241, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 2, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (569.3744467221753, 361.80390963134965), 'bypass': False}, 'pos': (569.3744467221753, 361.80390963134965), 'class': 'Make Curve', 'name': 'gen GW3'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'Simulated GW4'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'Simulated GW4', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': ['Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (241, 36, 241, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 2, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (569.3744467221759, 256.239624445495), 'bypass': False}, 'pos': (569.3744467221759, 256.239624445495), 'class': 'Make Curve', 'name': 'gen GW4'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/farge/data_farge.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': u'0', 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-326.56339278677825, 447.00593312905403), 'bypass': False}, 'pos': (-326.56339278677825, 447.00593312905403), 'class': 'Read XLS', 'name': 'Read data'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'GW_3', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (38, 234, 255, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (585.680422440259, 866.6804256672708), 'bypass': False}, 'pos': (585.680422440259, 866.6804256672708), 'class': 'Make Curve', 'name': 'GW3'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sig', {'expanded': True, 'name': 'sig', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with waterlevel data.', 'title': 'Signal', 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with datetime (or __index__)', 'title': 'Datetime', 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('N_MAX_POW', {'expanded': True, 'name': 'N_MAX_POW', 'limits': (1, 100000000000.0), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': 'Number of Waves', 'renamable': False, 'value': 200, 'visible': True, 'readonly': False, 'tip': 'Number of partial waves used to generate equation. Partial waves with most powerful frequencies are selected at first. See docs', 'removable': False, 'type': 'int'}), ('ranges', {'expanded': True, 'name': 'ranges', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Slice datetime', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('t0', {'expanded': True, 'name': 't0', 'strictNaming': False, 'default': '2014-10-17 15:00:00', 'enabled': True, 'title': 'Datetime Start', 'renamable': False, 'value': '2014-10-17 15:00:00', 'visible': True, 'readonly': False, 'tip': 'start of the slice region', 'removable': False, 'type': 'str'}), ('t1', {'expanded': True, 'name': 't1', 'strictNaming': False, 'default': '2015-04-13 06:00:00', 'enabled': True, 'title': 'Datetime Stop', 'renamable': False, 'value': '2015-04-13 06:00:00', 'visible': True, 'readonly': False, 'tip': 'end of the slice region', 'removable': False, 'type': 'str'}), ('eq', {'expanded': True, 'name': 'eq', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Generated Equation', 'renamable': False, 'value': u'def generated_function(t): return (np.zeros(25579) + [ 0.50622229] + 0.0219774471147*np.cos(6.71411698644e-05*t+2.86028482476) + 0.0200637363633*np.cos(0.000107671510209*t+-1.92724378453) + 0.0240836847229*np.cos(5.48592485478e-05*t+2.71229900733) + 0.0206724460851*np.cos(5.44498511705e-05*t+2.51583418158) + 0.0192634584146*np.cos(5.60874406794e-05*t+2.12963235563) + 0.0661666296742*np.cos(6.75505672417e-05*t+3.10877439971) + 0.0346018078408*np.cos(9.41613967611e-06*t+-0.536640522958) + 0.111452729221*np.cos(9.82553705333e-06*t+-2.89156641777) + 0.03600109268*np.cos(1.02349344306e-05*t+-1.58211631473) + 0.0311321384769*np.cos(1.06443318078e-05*t+-3.02451482923) + 0.028126657844*np.cos(7.77855016722e-06*t+-1.63408368052) + 0.0724342723582*np.cos(8.18794754444e-06*t+3.0720094714) + 0.0224101684698*np.cos(0.000283712382415*t+0.844310172512) + 0.0736071106683*np.cos(9.00674229889e-06*t+2.51741249089) + 0.0225548473516*np.cos(6.50941829783e-05*t+0.3094019539) + 0.0186540000191*np.cos(0.000285349971924*t+0.603147628608) + 0.0436912355259*np.cos(0.000285759369301*t+-0.0700129291523) + 0.0664200717407*np.cos(1.1053729185e-05*t+0.98208246676) + 0.0176812494763*np.cos(1.14631265622e-05*t+0.733508846768) + 1.53195598246*np.cos(0.000140423300387*t+-2.32495738111) + 0.491407454336*np.cos(0.000140832697764*t+0.788185733404) + 0.198725757733*np.cos(0.000141242095142*t+0.654556750368) + 0.109411521702*np.cos(0.000141651492519*t+0.717271084409) + 0.0325985650078*np.cos(0.000138785710878*t+-1.99777997038) + 0.113724315821*np.cos(1.22819213167e-06*t+-0.706669318397) + 0.145771707805*np.cos(0.000139604505633*t+-2.36170764037) + 0.260013247989*np.cos(0.00014001390301*t+-2.46613679166) + 0.179538012519*np.cos(2.86578164056e-06*t+-2.2621933474) + 0.0193899975236*np.cos(6.632237511e-05*t+3.09338905007) + 0.114630426758*np.cos(0.000142060889896*t+0.626701250414) + 0.0649384869674*np.cos(0.000142470287273*t+0.68153971824) + 0.0220772475514*np.cos(0.000419222914276*t+-2.38533689076) + 0.0491275238137*np.cos(0.000150248837441*t+0.301690000999) + 0.0248414032076*np.cos(0.000418813516898*t+1.23919069374) + 0.0401051788949*np.cos(4.99464800211e-05*t+-1.58524348713) + 0.0191649523888*np.cos(5.07652747755e-05*t+-1.26954975123) + 0.0170325510138*np.cos(0.000108080907587*t+0.677191614471) + 0.0222942865505*np.cos(5.158406953e-05*t+-2.76137676183) + 0.0235107712558*np.cos(5.19934669072e-05*t+-1.17110111272) + 0.0356969023568*np.cos(4.7899493135e-05*t+-0.547077344158) + 0.0231467885828*np.cos(0.000278799613888*t+2.01016184795) + 0.057550730837*np.cos(2.33356505017e-05*t+2.89458022939) + 0.0296250616024*np.cos(2.210745837e-05*t+2.57058128588) + 0.0465863346076*np.cos(2.29262531244e-05*t+1.34781058057) + 0.0341323869902*np.cos(2.04698688611e-05*t+2.56386530804) + 0.0505831162399*np.cos(2.00604714839e-05*t+-2.57570595599) + 0.0339882830015*np.cos(2.08792662383e-05*t+-2.60667427794) + 0.0189582275628*np.cos(0.00015475220859*t+1.3230826602) + 0.0172714016416*np.cos(0.000121591021035*t+-1.92894972367) + 0.0174584568086*np.cos(0.000120772226281*t+-2.15285575542) + 0.0185870761404*np.cos(0.000152295824327*t+1.88037836937) + 0.0231281745801*np.cos(0.000152705221704*t+1.49278515868) + 0.0451026033649*np.cos(0.000130188365957*t+-1.51205528702) + 0.0617523901528*np.cos(7.28727331455e-05*t+1.98180736624) + 0.0176854468365*np.cos(0.000127731981693*t+-1.56826941765) + 0.0219386905455*np.cos(0.000127322584316*t+-1.77422170347) + 0.0176188962777*np.cos(8.02418859355e-05*t+-0.877638372274) + 0.0182804723685*np.cos(7.24633357683e-05*t+-2.89494429605) + 0.0254481385476*np.cos(0.000129369571202*t+-2.29913414801) + 0.0223597681907*np.cos(0.000128960173825*t+-2.52458963359) + 0.027616647853*np.cos(0.000128550776448*t+-2.08004728645) + 0.0249671276938*np.cos(4.62619036261e-05*t+-0.213669052112) + 0.0190211712793*np.cos(3.56175718183e-05*t+1.42230933922) + 0.0334423736185*np.cos(3.60269691956e-05*t+-1.59856755324) + 0.0318783908853*np.cos(4.46243141172e-05*t+2.77844970267) + 0.0381715369968*np.cos(3.3161187555e-05*t+-1.30390727268) + 0.0289648730986*np.cos(3.35705849322e-05*t+-2.88911172448) + 0.0430260613697*np.cos(3.23423928006e-05*t+-1.72507271376) + 0.0315380487202*np.cos(3.27517901778e-05*t+0.994812314926) + 0.0284655492065*np.cos(4.83088905122e-05*t+-0.464662045931) + 0.0501173192412*np.cos(3.52081744411e-05*t+-1.22887228003) + 0.0532550948868*np.cos(3.39799823094e-05*t+-2.03288232622) + 0.0380851588885*np.cos(3.43893796867e-05*t+-1.78962869793) + 0.0184598174218*np.cos(9.2114409875e-05*t+-0.7078932254) + 0.236621981093*np.cos(8.18794754444e-07*t+0.45556094238) + 0.0172295442624*np.cos(0.000416766530012*t+-3.0776440649) + 0.0439761098926*np.cos(2.45638426333e-06*t+1.77312406616) + 0.0329755825451*np.cos(0.000150658234818*t+1.67073466244) + 0.021834628373*np.cos(0.000149430042686*t+1.31581601281) + 0.042437972108*np.cos(0.000147792453177*t+0.980648625195) + 0.0170871795968*np.cos(0.000148201850554*t+-2.61600694652) + 0.0298016999038*np.cos(0.000146973658423*t+1.56033261818) + 0.021134306893*np.cos(0.0001473830558*t+2.16207275937) + 0.0255293432195*np.cos(0.000126094392184*t+-2.24382796241) + 0.0199782230229*np.cos(0.000282074792906*t+0.729433771967) + 0.0272819078653*np.cos(0.000151477029572*t+1.99467551) + 0.0192771413542*np.cos(7.36915279e-05*t+-0.742872162286) + 0.0463648947236*np.cos(4.421491674e-05*t+0.39459248769) + 0.0476844975928*np.cos(0.000146154863668*t+2.71048048163) + 0.0283811334516*np.cos(4.13491350994e-05*t+1.95855489459) + 0.0227372785738*np.cos(4.0530340345e-05*t+2.19776435265) + 0.0194697804944*np.cos(4.09397377222e-05*t+-0.855301719123) + 0.0262677358801*np.cos(4.29867246083e-05*t+1.88346744276) + 0.0231735750183*np.cos(0.000567015367453*t+-2.02270043461) + 0.0491023837149*np.cos(4.21679298539e-05*t+0.984932220366) + 0.0194885343817*np.cos(0.000155571003344*t+1.2922271906) + 0.0240461013963*np.cos(1.31007160711e-05*t+1.82115370073) + 0.0993172543529*np.cos(1.26913186939e-05*t+1.09216574869) + 0.0401934979363*np.cos(1.18725239394e-05*t+0.5427574486) + 0.0305841636722*np.cos(1.473830558e-05*t+0.406849930938) + 0.0436927028016*np.cos(1.43289082028e-05*t+2.11054470709) + 0.0229852393698*np.cos(1.39195108256e-05*t+1.68880586806) + 0.0817109126657*np.cos(0.000138376313501*t+2.69588830876) + 0.231897851955*np.cos(0.000137966916124*t+-0.240106606802) + 0.0550691717469*np.cos(0.000136738723992*t+-2.87295703184) + 0.0304134978951*np.cos(0.000136329326615*t+-3.09125422792) + 0.100330831572*np.cos(0.000137557518747*t+-2.52555294033) + 0.0471359394104*np.cos(0.000137148121369*t+-2.8148275881) + 0.104592129043*np.cos(0.000135101134483*t+-1.80658594807) + 0.0270919987076*np.cos(0.000134691737106*t+-2.04996623901) + 0.0803803721556*np.cos(0.000135919929238*t+2.46794674876) + 0.198808232354*np.cos(0.000135510531861*t+-1.35118937317) + 0.0185470381664*np.cos(2.41544452561e-05*t+-1.91076843456) + 0.0180790146829*np.cos(2.45638426333e-05*t+1.25967623421) + 0.0356607956413*np.cos(2.49732400106e-05*t+1.61802543557) + 0.0308714632172*np.cos(2.5792034765e-05*t+-2.70207803701) + 0.0816396923661*np.cos(2.62014321422e-05*t+1.13135672821) + 0.0208925111504*np.cos(2.66108295194e-05*t+1.13747287054) + 0.0400110966147*np.cos(2.70202268967e-05*t+1.90919182906) + 0.0344409164279*np.cos(2.74296242739e-05*t+-1.95136476778) + 0.0369246455508*np.cos(2.78390216511e-05*t+1.30335516605) + 0.0290203978384*np.cos(7.08257462594e-05*t+1.53488602993) + 0.0179586694887*np.cos(0.000110946689227*t+-1.54257481067) + 0.143684861639*np.cos(4.09397377222e-07*t+-2.90401523267) + 0.0195314195701*np.cos(7.61479121633e-05*t+0.0740009848903) + 0.108745705209*np.cos(2.04698688611e-06*t+1.83741379417) + 0.0269204454016*np.cos(0.000421269901162*t+-1.57999136378) + 0.0504471355958*np.cos(0.000421679298539*t+1.79710022689) + 0.0890459048308*np.cos(0.000139195108256*t+-2.33257375215) + 0.0379520211863*np.cos(0.000286168766678*t+2.46755316657) + 0.0324947431905*np.cos(4.01209429678e-05*t+-2.04000089983) + 0.0211111988683*np.cos(3.97115455906e-05*t+2.73602959504) + 0.0195165846423*np.cos(0.000114221868245*t+-2.43160933806) + 0.0375139889271*np.cos(3.684576395e-05*t+-2.52646016596) + 0.0189794841484*np.cos(3.64363665728e-05*t+0.581764211908) + 0.0328803067511*np.cos(3.76645587044e-05*t+-2.84347445354) + 0.0182677945716*np.cos(3.72551613272e-05*t+0.513284457519) + 0.0311848263829*np.cos(3.84833534589e-05*t+-3.00797354335) + 0.0502267371557*np.cos(3.80739560817e-05*t+3.05149990439) + 0.0279882275605*np.cos(3.88927508361e-05*t+-2.65277685618) + 0.0387588412706*np.cos(4.09397377222e-06*t+0.123318678326) + 0.109300415974*np.cos(3.684576395e-06*t+-2.07507101988) + 0.0728196283951*np.cos(4.91276852667e-06*t+-2.43738021768) + 0.10852498925*np.cos(4.50337114944e-06*t+-1.76546161273) + 0.102270543381*np.cos(5.73156328111e-06*t+-0.519209485492) + 0.045046574906*np.cos(5.32216590389e-06*t+-2.38223837403) + 0.0397092475462*np.cos(6.55035803555e-06*t+0.678259547662) + 0.0208475617518*np.cos(6.14096065833e-06*t+2.93510358443) + 0.144401088668*np.cos(7.36915279e-06*t+1.82022060835) + 0.0448098964203*np.cos(6.95975541278e-06*t+-1.53303312975) + 0.0194989460687*np.cos(0.00070743866784*t+-1.28444927661) + 0.0357613901157*np.cos(4.74900957578e-05*t+-1.3539064148) + 0.0180315699434*np.cos(4.70806983805e-05*t+-0.330625981487) + 0.0242565258092*np.cos(6.30471960922e-05*t+0.0562682246727) + 0.0173681187933*np.cos(6.42753882239e-05*t+-0.671336148652) + 0.0221527581492*np.cos(1.92416767294e-05*t+-2.74769062692) + 0.0429071531223*np.cos(1.96510741067e-05*t+-0.587650991169) + 0.0218389892513*np.cos(1.88322793522e-05*t+0.380408430898) + 0.0414675090392*np.cos(1.67852924661e-05*t+0.749822370769) + 0.0548618238308*np.cos(1.71946898433e-05*t+-0.745845186597) + 0.0676682573054*np.cos(1.59664977117e-05*t+-0.0613650250883) + 0.0395180682059*np.cos(1.63758950889e-05*t+-2.60894883118) + 0.0211064118084*np.cos(0.000131416558088*t+-3.0149137099) + 0.0351840563676*np.cos(0.000131825955466*t+-2.16993251128) + 0.0344522250301*np.cos(0.000130597763334*t+-0.563291814368) + 0.0477203242754*np.cos(0.000131007160711*t+-2.52635806162) + 0.0466593535236*np.cos(1.63758950889e-06*t+-0.726864662606) + 0.0414287360324*np.cos(0.000133463544974*t+-2.5733327546) + 0.0243174557182*np.cos(0.000132235352843*t+-2.19064009726) + 0.0505290610298*np.cos(0.00013264475022*t+-1.46750104105) + 0.0233212140747*np.cos(0.000133872942352*t+-2.55958096546) + 0.040713658542*np.cos(0.000134282339729*t+-2.05598370508) + 0.0518709076169*np.cos(0.000281255998152*t+0.399172168257) + 0.0214124366109*np.cos(5.895322232e-05*t+1.22467779289) + 0.017656715333*np.cos(5.81344275655e-05*t+-0.0459748581685) + 0.0235587549724*np.cos(7.20539383911e-05*t+2.39968827494) + 0.0306809382394*np.cos(6.01814144517e-05*t+0.905169162391) + 0.0571370324327*np.cos(3.07048032917e-05*t+0.0142250739476) + 0.0295642024313*np.cos(3.02954059144e-05*t+-0.610766266446) + 0.0876053027587*np.cos(2.947661116e-05*t+0.397674228709) + 0.0219376517134*np.cos(2.90672137828e-05*t+0.873560689432) + 0.0369652719656*np.cos(3.19329954233e-05*t+0.949642614637) + 0.0249579362302*np.cos(3.15235980461e-05*t+0.464883073809) + 0.050120233286*np.cos(0.000426592067066*t+-2.09999880444) + 0.0249856050637*np.cos(0.000426182669688*t+1.13211750111) + 0.0184872098048*np.cos(0.000427001464443*t+-1.68093033124) + 0.0197549907922*np.cos(0.000429048451329*t+-1.02173414509) + 0.114737539735*np.cos(0.000145745466291*t+2.16446529223) + 0.427870246241*np.cos(0.000145336068914*t+0.140852374104) + 0.0941574959551*np.cos(0.000144926671537*t+0.497232058934) + 0.106544651397*np.cos(0.000144517274159*t+0.604005916826) + 0.0765701705959*np.cos(0.000144107876782*t+0.818733251289) + 0.108262317725*np.cos(0.000143698479405*t+0.778420031235) + 0.194757465503*np.cos(0.000143289082028*t+1.35695961397) + 0.150498223311*np.cos(0.000142879684651*t+-0.155687953241) + 0.0634300305226*np.cos(0.000280846600774*t+-2.86688139142) + 0.0382348091697*np.cos(0.000133054147597*t+1.08608637804) + 0.0190380532802*np.cos(0.000278390216511*t+-0.329875661582) + 0.0311146565162*np.cos(0.000146564261046*t+2.38882700435) + 0.024783782615*np.cos(0.000108490304964*t+-2.09651018224))', 'visible': True, 'readonly': False, 'tip': 'This equation is generated after processing. You may copy it to buffer.\nIf you want to access parameters independently consider opening table that is stored in terminal `params`', 'removable': False, 'type': 'text'}), ('plot', {'expanded': True, 'name': 'plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Display plot', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-154.72774411370392, 449.56053311545634), 'bypass': False}, 'pos': (-154.72774411370392, 449.56053311545634), 'class': 'FFT', 'name': u'FFT.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Water level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': 'm AMSL', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': False, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (1104.1874921495116, 503.35372797215837), 'bypass': False}, 'pos': (1104.1874921495116, 503.35372797215837), 'class': 'Plot Curves', 'name': "Plot gw4's"}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'Simulated GW2'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'Simulated GW2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': ['Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': 'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (241, 36, 241, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'}), ('Display Line', {'expanded': True, 'name': 'Display Line', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'display line-curve between data points', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Style', {'expanded': True, 'name': 'Style', 'limits': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 2, 'visible': True, 'readonly': False, 'tip': 'Style', 'values': {'solid': 1, 'dash': 2, 'dash-dot': 4, 'dash-dot-dot': 5, 'dot-dot': 3}, 'removable': False, 'type': 'list'}), ('Linewidth', {'expanded': True, 'name': 'Linewidth', 'limits': (0.0, 20.0), 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': None, 'renamable': False, 'readonly': False, 'value': 1.0, 'visible': True, 'step': 0.1, 'tip': 'Linewidth', 'removable': False, 'type': 'float'})])}), ('Display Data Points', {'expanded': True, 'name': 'Display Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'display data points as scatter', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Symbol', {'expanded': True, 'name': 'Symbol', 'limits': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'strictNaming': False, 'default': 'o', 'enabled': True, 'title': None, 'renamable': False, 'value': 'o', 'visible': True, 'readonly': False, 'tip': 'Symbol for data points', 'values': {'square': 's', 'triangle': 't', 'diamond': 'd', 'star': 'star', 'circle': 'o', 'hexagon': 'h', 'pentagon': 'p', 'cross': '+'}, 'removable': False, 'type': 'list'}), ('Size', {'expanded': True, 'name': 'Size', 'limits': (0, 1000), 'strictNaming': False, 'default': 5, 'enabled': True, 'title': None, 'renamable': False, 'value': 5, 'visible': True, 'readonly': False, 'tip': 'Symbol size', 'removable': False, 'type': 'int'})])})])}, 'pos': (571.5586800105459, 465.6903201109692), 'bypass': False}, 'pos': (571.5586800105459, 465.6903201109692), 'class': 'Make Curve', 'name': 'gen GW2 E'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
