pos: (0.0, 0.0)
connects: [(u'Pipe.0', 'Out', 'Peaks RIVER', 'In'), (u'Match Peaks.0', 'matched', u'Tidal Efficiency.1', 'md_peaks'), ('Well data', 'output', u'Quick View.0', 'In'), ('Peaks GW_1', 'peaks', u'Match Peaks.0', 'GW_peaks'), (u'Pipe.0', 'Out', u'Tidal Efficiency.1', 'df'), ('Well data', 'output', u'Tidal Efficiency.0', 'df'), ('Peaks RIVER', 'peaks', u'Match Peaks.0', 'W_peaks'), (u'Match Peaks.0', 'matched', 'Quick View.2', 'In'), ('Well data', 'output', u'Pipe.0', 'In'), ('Well data', 'output', u'Plot Histogram.0', 'In'), (u'Tidal Efficiency.1', 'E_cyclic', u'Quick View.1', 'In'), (u'Pipe.0', 'Out', 'Peaks GW_1', 'In')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('closed', {'expanded': True, 'name': 'closed', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Close Pipe', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If Checked -- close pipe, and do not transmit data further', 'removable': False, 'type': 'bool'})])}, 'pos': (216.0412002002587, 260.4217406834033), 'bypass': False}, 'pos': (216.0412002002587, 260.4217406834033), 'class': 'Pipe', 'name': u'Pipe.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Option', {'expanded': True, 'name': 'Match Option', 'limits': ['Closest Time'], 'strictNaming': False, 'default': 'Closest Time', 'tip': 'Match option:\n"Closest Time" - match gw_peaks which have closest datetime to w_peaks', 'title': None, 'renamable': False, 'value': 'Closest Time', 'visible': True, 'readonly': False, 'values': ['Closest Time'], 'removable': False, 'type': 'list', 'enabled': True}), ('Closest Time', {'expanded': True, 'name': 'Closest Time', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Column', {'expanded': True, 'name': 'Match Column', 'limits': ['time_min', 'time_max'], 'strictNaming': False, 'default': None, 'tip': 'Data will be matched based on this column', 'title': None, 'renamable': False, 'value': 'time_min', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('side', {'expanded': True, 'name': 'side', 'limits': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'strictNaming': False, 'default': 'right (>=t)', 'tip': 'search direction with respect to `t`.\n"right (>=t)"  - search after or at `t`\n"right (>t)" - search after `t`\n"left (<=t)" - search before or at `t`\n"left (<t)" - search before `t`\n"both"  - search before and after `t` or at `t`', 'title': None, 'renamable': False, 'value': 'right (>=t)', 'visible': True, 'readonly': False, 'values': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'removable': False, 'type': 'list', 'enabled': True}), ('use_window', {'expanded': True, 'name': 'use_window', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Search matching peaks within time-window\n[t-window : t+window]\nEnables `window` float spinbox', 'removable': False, 'type': 'bool'}), ('window', {'expanded': True, 'suffix': ' hours', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'tip': 'Is read only if `use_window` is checked!\nNumber of hours to determine time-window', 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'window'})])}), ('MATCHED/PEAKS', {'expanded': True, 'name': 'MATCHED/PEAKS', 'strictNaming': False, 'default': '?/?', 'enabled': True, 'title': None, 'renamable': False, 'value': '34/34', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (536.0533035681705, 389.75594665931976), 'bypass': False}, 'pos': (536.0533035681705, 389.75594665931976), 'class': 'Match Peaks', 'name': u'Match Peaks.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('column', {'expanded': True, 'name': 'column', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': 'data', 'renamable': False, 'value': u'River', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': 12.42, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours.', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('hMargin', {'expanded': True, 'suffix': ' hours', 'limits': (0.0, 100.0), 'strictNaming': False, 'default': 1.5, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - dt < T_i/2 < T/2 + dt', 'title': 'dt', 'renamable': False, 'value': 0.5, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'hMargin'}), ('order', {'expanded': True, 'name': 'order', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': '39', 'visible': True, 'readonly': True, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'str'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'tip': 'remove possible multiple peaks that go one-by-one', 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': True, 'removable': False, 'type': 'bool', 'enabled': True})])}), ('ignore', {'expanded': True, 'name': 'ignore', 'strictNaming': False, 'default': False, 'tip': 'Checkbox to ignore peaks that are mentioned in parameter `Peak IDs', 'title': 'Ignore peaks', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('peaks2ignore', {'expanded': True, 'name': 'peaks2ignore', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Peak IDs', 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': 'IDs of the peaks that will be ignored. IDs can be found in table in terminal `raw`. \nInteger or a comma-separated integer list.\n Example:\n12\n0, 12, 1153', 'removable': False, 'type': 'str'})]), 'enabled': True}), ('check_grp', {'expanded': True, 'name': 'check_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Plausibility Check Params', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('MIN_grp', {'expanded': True, 'name': 'MIN_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour MIN peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 10.0, 'tip': 'Lower border of the valid time-distance between two neigbour MIN peaks', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 10.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 15.0, 'tip': 'Upper border of the valid time-distance between two neigbour MIN peaks', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 15.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (MIN)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('MAX_grp', {'expanded': True, 'name': 'MAX_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour MAX peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 10.0, 'tip': 'Lower border of the valid time-distance between two neigbour MAX peaks', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 10.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 15.0, 'tip': 'Upper border of the valid time-distance between two neigbour MAX peaks', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 15.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (MAX)', 'renamable': False, 'value': 1, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('ALL_grp', {'expanded': True, 'name': 'ALL_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour ALL peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 4.0, 'tip': 'Lower border of the valid time-distance between two neigbour peaks (MIN or MAX)', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 4.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 9.0, 'tip': 'Upper border of the valid time-distance between two neigbour peaks (MIN or MAX)', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 9.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (ALL)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('warn_sum', {'expanded': True, 'name': 'warn_sum', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (Total)', 'renamable': False, 'value': 1, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('out_grp', {'expanded': True, 'name': 'out_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Output', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('raw_nmin', {'expanded': True, 'name': 'raw_nmin', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Minimums', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('raw_nmax', {'expanded': True, 'name': 'raw_nmax', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Maximums', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('raw_n_all', {'expanded': True, 'name': 'raw_n_all', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Number\nof Mins+Maxs', 'renamable': False, 'value': 68, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('n_cycles', {'expanded': True, 'name': 'n_cycles', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Final Number\nof Cycles', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (396.2825078446166, 333.1250466200778), 'bypass': False}, 'pos': (396.2825078446166, 333.1250466200778), 'class': 'Detect Peaks (v2)', 'name': 'Peaks RIVER'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'examples/data/test_data.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-62.441018786560406, 110.9650029750978), 'bypass': False}, 'pos': (-62.441018786560406, 110.9650029750978), 'class': 'Read XLS', 'name': 'Well data'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'River', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': ['see matched peaks'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': 'see matched peaks', 'visible': True, 'readonly': True, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '2) Cyclic amplitude', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.2478', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (699.4061760877664, 292.20742805701707), 'bypass': False}, 'pos': (699.4061760877664, 292.20742805701707), 'class': 'Tidal Efficiency', 'name': u'Tidal Efficiency.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'River', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '1) STD', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.2879', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (154.4402799326055, 110.48159009296839), 'bypass': False}, 'pos': (154.4402799326055, 110.48159009296839), 'class': 'Tidal Efficiency', 'name': u'Tidal Efficiency.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Signal', {'expanded': True, 'name': 'Signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with an array to be evaluated', 'title': None, 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Signal Units', {'expanded': True, 'name': 'Signal Units', 'strictNaming': False, 'default': u'', 'enabled': True, 'title': None, 'renamable': False, 'value': u'm AMSL', 'visible': True, 'readonly': False, 'tip': 'Units of the `Signal` to be displayed', 'removable': False, 'type': 'str'}), ('Histogram Type', {'expanded': True, 'name': 'Histogram Type', 'limits': ['Frequency', 'Relative Frequency', 'Normalized'], 'strictNaming': False, 'default': 'Frequency', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Frequency', 'visible': True, 'readonly': False, 'tip': 'Type of the histogram.', 'values': ['Frequency', 'Relative Frequency', 'Normalized'], 'removable': False, 'type': 'list'}), ('Bins', {'expanded': True, 'name': 'Bins', 'limits': (1, 200), 'strictNaming': False, 'default': 10, 'tip': 'Number of bins for building histogram', 'title': None, 'renamable': False, 'readonly': False, 'value': 10, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('Bin Width', {'expanded': True, 'name': 'Bin Width', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.231', 'visible': True, 'readonly': True, 'tip': 'Bin width', 'removable': False, 'type': 'str'}), ('Max', {'expanded': True, 'name': 'Max', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '2.390', 'visible': True, 'readonly': True, 'tip': 'Maximum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Min', {'expanded': True, 'name': 'Min', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.080', 'visible': True, 'readonly': True, 'tip': 'Minimum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Mean', {'expanded': True, 'name': 'Mean', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.770', 'visible': True, 'readonly': True, 'tip': 'Mean value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Median', {'expanded': True, 'name': 'Median', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.780', 'visible': True, 'readonly': True, 'tip': 'Median value of passed `Signal`', 'removable': False, 'type': 'str'}), ('STD', {'expanded': True, 'name': 'STD', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.373', 'visible': True, 'readonly': True, 'tip': 'Standard deviation of passed `Signal`', 'removable': False, 'type': 'str'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (149.5638992708665, -2.4167390160387754), 'bypass': False}, 'pos': (149.5638992708665, -2.4167390160387754), 'class': 'Plot Histogram', 'name': u'Plot Histogram.0'}, {'state': {'pos': (694.722594940725, 442.0300508781668), 'bypass': False}, 'pos': (694.722594940725, 442.0300508781668), 'class': 'Quick View', 'name': 'Quick View.2'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('column', {'expanded': True, 'name': 'column', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'River'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': 'data', 'renamable': False, 'value': u'GW_1', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': 12.42, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours.', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('hMargin', {'expanded': True, 'suffix': ' hours', 'limits': (0.0, 100.0), 'strictNaming': False, 'default': 1.5, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - dt < T_i/2 < T/2 + dt', 'title': 'dt', 'renamable': False, 'value': 0.5, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'hMargin'}), ('order', {'expanded': True, 'name': 'order', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': '39', 'visible': True, 'readonly': True, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'str'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'tip': 'remove possible multiple peaks that go one-by-one', 'title': None, 'renamable': False, 'value': True, 'visible': False, 'readonly': True, 'removable': False, 'type': 'bool', 'enabled': True})])}), ('ignore', {'expanded': True, 'name': 'ignore', 'strictNaming': False, 'default': False, 'tip': 'Checkbox to ignore peaks that are mentioned in parameter `Peak IDs', 'title': 'Ignore peaks', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('peaks2ignore', {'expanded': True, 'name': 'peaks2ignore', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Peak IDs', 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': 'IDs of the peaks that will be ignored. IDs can be found in table in terminal `raw`. \nInteger or a comma-separated integer list.\n Example:\n12\n0, 12, 1153', 'removable': False, 'type': 'str'})]), 'enabled': True}), ('check_grp', {'expanded': True, 'name': 'check_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Plausibility Check Params', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('MIN_grp', {'expanded': True, 'name': 'MIN_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour MIN peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 10.0, 'tip': 'Lower border of the valid time-distance between two neigbour MIN peaks', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 10.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 15.0, 'tip': 'Upper border of the valid time-distance between two neigbour MIN peaks', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 15.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (MIN)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('MAX_grp', {'expanded': True, 'name': 'MAX_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour MAX peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 10.0, 'tip': 'Lower border of the valid time-distance between two neigbour MAX peaks', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 10.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 15.0, 'tip': 'Upper border of the valid time-distance between two neigbour MAX peaks', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 15.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (MAX)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('ALL_grp', {'expanded': True, 'name': 'ALL_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Neighbour ALL peaks', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('range1', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 4.0, 'tip': 'Lower border of the valid time-distance between two neigbour peaks (MIN or MAX)', 'title': 'Valid Period\n(lower border)', 'renamable': False, 'value': 4.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range1'}), ('range2', {'expanded': True, 'suffix': ' hours', 'strictNaming': False, 'default': 9.0, 'tip': 'Upper border of the valid time-distance between two neigbour peaks (MIN or MAX)', 'title': 'Valid Period\n(upper border)', 'renamable': False, 'value': 9.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'range2'}), ('warn', {'expanded': True, 'name': 'warn', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (ALL)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('warn_sum', {'expanded': True, 'name': 'warn_sum', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Warnings (Total)', 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('out_grp', {'expanded': True, 'name': 'out_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Output', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('raw_nmin', {'expanded': True, 'name': 'raw_nmin', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Minimums', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('raw_nmax', {'expanded': True, 'name': 'raw_nmax', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Maximums', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('raw_n_all', {'expanded': True, 'name': 'raw_n_all', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Raw Number\nof Mins+Maxs', 'renamable': False, 'value': 68, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('n_cycles', {'expanded': True, 'name': 'n_cycles', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': 'Final Number\nof Cycles', 'renamable': False, 'value': 34, 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (397.3057673786463, 439.65336118404934), 'bypass': False}, 'pos': (397.3057673786463, 439.65336118404934), 'class': 'Detect Peaks (v2)', 'name': 'Peaks GW_1'}, {'state': {'pos': (-62.27844752643617, -0.3073557829544882), 'bypass': False}, 'pos': (-62.27844752643617, -0.3073557829544882), 'class': 'Quick View', 'name': u'Quick View.0'}, {'state': {'pos': (848.2419512252004, 284.23519548978703), 'bypass': False}, 'pos': (848.2419512252004, 284.23519548978703), 'class': 'Quick View', 'name': u'Quick View.1'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
