pos: (0.0, 0.0)
connects: [('peaks_x', 'px', 'PLOT!!!', 'px'), (u'datetime2sec.0', 'Out', 'dt-peaks.0', 'x'), ('df2recArray.0', 'Out', 'Y.0', 'In'), ('dp.0', 'ind', 'dt-peaks.0', 'ind'), ('Y-Pipe', 'output', 'dp.0', 'In'), ('Y.0', 'GW_2', 'X (indexes)', 'input'), ('X-Pipe', 'output', 'peaks_x', 'x'), ('readCSV.0', 'output', 'df2recArray.0', 'In'), ('define X for SIN', 'output', 'y.0', 'input'), ('Y.0', 'Datetime', u'datetime2sec.0', 'In'), ('dp.0', 'ind', 'peaks_x', 'ind'), ('Y.0', 'GW_2', 'Y-Pipe', 'input'), ('X-Pipe', 'output', 'PLOT!!!', 'x'), ('X (indexes)', 'output', 'X-Pipe', 'input'), ('Y-Pipe', 'output', 'PLOT!!!', 'y'), ('readCSV.0', 'output', 'viewPandasDf.0', 'In'), ('dp.0', 'val', 'PLOT!!!', 'py'), ('dt-peaks.0', 'px', 'LagPlot.0', 'input')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'text': "# Access inputs as args['input_name']\nreturn {'output': args['input']} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (33.85283431613726, -563.0326360180709), 'bypass': False}, 'pos': (33.85283431613726, -563.0326360180709), 'class': 'PythonEval', 'name': 'X-Pipe'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('dtype', {'expanded': True, 'name': 'dtype', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 'datetime64[ns]', 'visible': True, 'readonly': True, 'tip': 'data-type of the received object', 'removable': False, 'type': 'str'}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter. Check the results manually on plot', 'removable': False, 'type': 'float', 'suffix': ' hours'})])}, 'pos': (32.06404604714072, -170.3237937234136), 'bypass': False}, 'pos': (32.06404604714072, -170.3237937234136), 'class': 'datetime2sec', 'name': u'datetime2sec.0'}, {'state': {'text': "# Access inputs as args['input_name']\nimport pandas as pd\n\nfrom pandas.tools.plotting import lag_plot\nimport matplotlib.pyplot as plt\na = args['input']\nif a is not None:\n  b = pd.Series(a)\n\n  plt.figure()\n  lag_plot(b)\n  plt.show()", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (623.4164337755888, -222.46198376045362), 'bypass': False}, 'pos': (623.4164337755888, -222.46198376045362), 'class': 'PythonEval', 'name': 'LagPlot.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 30, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('split', {'expanded': True, 'name': 'split', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'If checked -> treat minima/maxima peaks separately\nif not -> together', 'removable': False, 'type': 'bool'}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}, 'pos': (217.47701353046733, -414.8258298852671), 'bypass': False}, 'pos': (217.47701353046733, -414.8258298852671), 'class': 'detectPeaks', 'name': 'dp.0'}, {'state': {'columns': ['GW_2', 'Datetime'], 'pos': (-317.3421907514595, -294.6152086541582), 'bypass': False}, 'pos': (-317.3421907514595, -294.6152086541582), 'class': 'ColumnSelect', 'name': 'Y.0'}, {'state': {'pos': (-597.4203398069685, -429.8672266166352), 'bypass': False}, 'pos': (-597.4203398069685, -429.8672266166352), 'class': 'df2recArray', 'name': 'df2recArray.0'}, {'state': {'text': "# Access inputs as args['input_name']\nx = args['x']\nindices = args['ind']\nvalsx = x[indices]\nreturn {'px': valsx} ## one key per output terminal", 'terminals': OrderedDict([('x', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('ind', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('px', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (410.0531762713619, -552.5718473596784), 'bypass': False}, 'pos': (410.0531762713619, -552.5718473596784), 'class': 'PythonEval', 'name': 'peaks_x'}, {'state': {'pos': (-744.8902367768308, -543.3342992878406), 'bypass': False}, 'pos': (-744.8902367768308, -543.3342992878406), 'class': 'viewPandasDf', 'name': 'viewPandasDf.0'}, {'state': {'text': "# Access inputs as args['input_name']\nimport matplotlib.pyplot as plt\nx = args['x']\ny = args['y']\n\npx = args['px']\npy = args['py']\n\nplt.figure()\nplt.plot(x, y, color='k')\n\n\nplt.scatter(px, py, color='b', marker='x', s=250)\nplt.show()\n", 'terminals': OrderedDict([('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('x', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('y', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('px', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('py', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False})]), 'pos': (622.5990450050963, -350.13932371415535), 'bypass': False}, 'pos': (622.5990450050963, -350.13932371415535), 'class': 'PythonEval', 'name': 'PLOT!!!'}, {'state': {'text': "# Access inputs as args['input_name']\nx = args['x']\nindices = args['ind']\nvalsx = x[indices]\nreturn {'px': valsx} ## one key per output terminal", 'terminals': OrderedDict([('x', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('px', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('ind', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False})]), 'pos': (478.5725355930499, -221.43036534891786), 'bypass': False}, 'pos': (478.5725355930499, -221.43036534891786), 'class': 'PythonEval', 'name': 'dt-peaks.0'}, {'state': {'text': "# Access inputs as args['input_name']\nreturn {'output': np.arange(0, 20, 0.1)} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-173.88224388504386, -665.561227759465), 'bypass': False}, 'pos': (-173.88224388504386, -665.561227759465), 'class': 'PythonEval', 'name': 'define X for SIN'}, {'state': {'text': "# Access inputs as args['input_name']\nreturn {'output': args['input']} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (33.36728111571162, -327.8518676024266), 'bypass': False}, 'pos': (33.36728111571162, -327.8518676024266), 'class': 'PythonEval', 'name': 'Y-Pipe'}, {'state': {'text': "# Access inputs as args['input_name']\nimport random\nx = args['input']\ny = np.array([np.sin(xi)+random.random() for xi in x])\nreturn {'output': y} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-194.18474338035054, -375.9043219199052), 'bypass': False}, 'pos': (-194.18474338035054, -375.9043219199052), 'class': 'PythonEval', 'name': 'y.0'}, {'state': {'text': "# Access inputs as args['input_name']\nreturn {'output': np.arange(0, len(args['input']))} ## one key per output terminal", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-343.27744047258716, -592.5779080202785), 'bypass': False}, 'pos': (-343.27744047258716, -592.5779080202785), 'class': 'PythonEval', 'name': 'X (indexes)'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/TESTDATA.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': '.', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': ';', 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'1', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u'[0]', 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u"lambda x: datetime.strptime(x, '%d.%m.%Y %H:%M')", 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'5000', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'---', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-742.9065026130884, -429.004709157923), 'bypass': False}, 'pos': (-742.9065026130884, -429.004709157923), 'class': 'readCSV', 'name': 'readCSV.0'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-76.91551678401066, 46.852207095600534)
    bypass: False
