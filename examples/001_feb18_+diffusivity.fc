pos: (0.0, 0.0)
connects: [('peaks_w.1', 'peaks', u'Plot Histogram.1', 'In'), ('pipe.1', 'Out', 'pickEqualDates.0', 'pickFrom'), ('pickEqualDates.0', 'Out', u'QuickView.1', 'In'), (u'tidalEfficiency.0', 'E', u'Diffusivity (Ferris).0', 'E'), (u'pipe.0', 'Out', u'tidalEfficiency.2', 'df'), (u'tidalEfficiency.2', 'E', u'Diffusivity (Ferris).1', 'E'), (u'pipe.0', 'Out', 'pipe.1', 'In'), (u'pipe.5', 'Out', u'tidalEfficiency.0', 'df'), (u'makeTimeseriesCurve.1', 'Curve', u'TimeseriesPlot.0', 'Curves'), (u'readXLS.0', 'output', u'QuickView.0', 'In'), ('readXLS.1', 'output', u'TimeLag.0', 'df_w'), (u'tidalEfficiency.1', 'E', u'Diffusivity (Ferris).3', 'E'), (u'readXLS.0', 'output', u'pipe.5', 'In'), ('peaks_w.1', 'peaks', u'matchpeaks.0', 'W_peaks'), (u'Diffusivity (Ferris).0', 'D (E)', 'ev.0', 'D'), (u'tidalEfficiency.0', 'E', u'TimeLag.0', 'E'), ('peak_gw2.0', 'peaks', u'matchpeaks.0', 'GW_peaks'), (u'readXLS.0', 'output', u'pipe.0', 'In'), (u'makeTimeseriesCurve.0', 'Curve', u'TimeseriesPlot.0', 'Curves'), ('ev.0', 'output', 'pickEqualDates.0', 'pattern'), (u'readXLS.0', 'output', 'peaks_w.1', 'In'), (u'pipe.5', 'Out', u'TimeLag.0', 'df_gw'), (u'readXLS.0', 'output', 'peak_gw2.0', 'In'), (u'pipe.5', 'Out', u'makeTimeseriesCurve.0', 'df'), (u'pipe.0', 'Out', u'tidalEfficiency.1', 'df'), (u'TimeLag.0', 'tlag', u'Diffusivity (Ferris).0', 'tlag'), ('ev.0', 'output', u'makeTimeseriesCurve.1', 'df'), (u'matchpeaks.0', 'matched', u'tidalEfficiency.0', 'matched_peaks')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (-150.0, 0.0)
    bypass: False
nodes: [{'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('column', {'expanded': True, 'name': 'column', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 20, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': True, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}), ('Period Check Params', {'expanded': True, 'name': 'Period Check Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours. If `None`, will calculate\nthe Period `T` as the mean of difference between peaks, multiplied\nby two (i.e. T = peaks["time"].diff().mean()*2)', 'removable': False, 'type': 'str'}), ('hMargin', {'expanded': True, 'name': 'hMargin', 'limits': (0.0, 100.0), 'strictNaming': False, 'default': 1.5, 'enabled': True, 'title': None, 'renamable': False, 'value': 1.5, 'visible': True, 'readonly': False, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - hMargin < T_i/2 < T/2 + hMargin', 'removable': False, 'type': 'float'}), ('Warnings', {'expanded': True, 'name': 'Warnings', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': '4', 'visible': True, 'readonly': True, 'tip': 'Number of period-check warnings detected after detecting peaks.\nWarnings are raised where period condition is not met.\tHit `Plot` button to visualize errors', 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (855.5999485074294, -471.9125393783105), 'bypass': False}, 'pos': (855.5999485074294, -471.9125393783105), 'class': 'detectPeaks_ts', 'name': 'peaks_w.1'}, {'state': {'text': "# Access inputs as args['input']\n\nfrom lib import Package as P; import pandas as pd\nfrom lib.functions.ferris1951 import h\n\nD = args['D']\nh0 = 3.89//2\nt0 = 12.42*60.*60.\nx0 = 42.\n\nt = np.arange(0, 3600*73, 3600)\nH  = []\nT = []\nT0 = np.datetime64('2014-10-17 23:00:00')\nDT = np.timedelta64(1, 'h')\n\nfor i, ti in enumerate(t):\n\tHi = h(x0, ti, h0, t0, D)\n\tH.append(Hi)\n\tT.append(T0+DT*i)\n\nH = np.array(H)\nT = np.array(T)\n\ndf = pd.DataFrame(data={'datetime': T, 'fitted GW2': H})\nreturn {'output': df} ## one key per output terminal", 'terminals': OrderedDict([('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('D', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (1668.431162196977, -343.7122067269256), 'bypass': False}, 'pos': (1668.431162196977, -343.7122067269256), 'class': 'PythonEval', 'name': 'ev.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Option', {'expanded': True, 'name': 'Match Option', 'limits': ['Closest Time'], 'strictNaming': False, 'default': 'Closest Time', 'tip': 'Match option:\n"Closest Time" - match gw_peaks which have closest datetime to w_peaks', 'title': None, 'renamable': False, 'value': 'Closest Time', 'visible': True, 'readonly': False, 'values': ['Closest Time'], 'removable': False, 'type': 'list', 'enabled': True}), ('Closest Time', {'expanded': True, 'name': 'Closest Time', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Match Column', {'expanded': True, 'name': 'Match Column', 'limits': ['time_min', 'time_max'], 'strictNaming': False, 'default': None, 'tip': 'Data will be matched based on this column', 'title': None, 'renamable': False, 'value': 'time_min', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('side', {'expanded': True, 'name': 'side', 'limits': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'strictNaming': False, 'default': 'right (>=t)', 'tip': 'search direction with respect to `t`.\n"right (>=t)"  - search after or at `t`\n"right (>t)" - search after `t`\n"left (<=t)" - search before or at `t`\n"left (<t)" - search before `t`\n"both"  - search before and after `t` or at `t`', 'title': None, 'renamable': False, 'value': 'right (>=t)', 'visible': True, 'readonly': False, 'values': ['right (>=t)', 'right (>t)', 'left (<=t)', 'left (<t)', 'both'], 'removable': False, 'type': 'list', 'enabled': True}), ('use_window', {'expanded': True, 'name': 'use_window', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Search matching peaks within time-window\n[t-window : t+window]\nEnables `window` float spinbox', 'removable': False, 'type': 'bool'}), ('window', {'expanded': True, 'name': 'window', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': 'Is read only if `use_window` is checked!\nNumber of hours to determine time-window', 'removable': False, 'type': 'float'})])}), ('MATCHED/PEAKS', {'expanded': True, 'name': 'MATCHED/PEAKS', 'strictNaming': False, 'default': '?/?', 'enabled': True, 'title': None, 'renamable': False, 'value': '345/345', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (1019.1143916963181, -423.8851455040842), 'bypass': False}, 'pos': (1019.1143916963181, -423.8851455040842), 'class': 'matchpeaks', 'name': u'matchpeaks.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Signal', {'expanded': True, 'name': 'Signal', 'limits': ['N', 'ind_min', 'ind_max', 'val_min', 'val_max', 'tidal_range'], 'strictNaming': False, 'default': None, 'tip': 'Name of the column with an array to be evaluated', 'title': None, 'renamable': False, 'value': 'tidal_range', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Signal Units', {'expanded': True, 'name': 'Signal Units', 'strictNaming': False, 'default': u'', 'enabled': True, 'title': None, 'renamable': False, 'value': u'm AMSL', 'visible': True, 'readonly': False, 'tip': 'Units of the `Signal` to be displayed', 'removable': False, 'type': 'str'}), ('Histogram Type', {'expanded': True, 'name': 'Histogram Type', 'limits': ['Frequency', 'Relative Frequency', 'Normalized'], 'strictNaming': False, 'default': 'Frequency', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Frequency', 'visible': True, 'readonly': False, 'tip': 'Type of the histogram.', 'values': ['Frequency', 'Relative Frequency', 'Normalized'], 'removable': False, 'type': 'list'}), ('Bins', {'expanded': True, 'name': 'Bins', 'limits': (1, 200), 'strictNaming': False, 'default': 10, 'tip': 'Number of bins for building histogram', 'title': None, 'renamable': False, 'readonly': False, 'value': 10, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('Data Max', {'expanded': True, 'name': 'Data Max', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '4.88', 'visible': True, 'readonly': True, 'tip': 'Maximum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Data Min', {'expanded': True, 'name': 'Data Min', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.50', 'visible': True, 'readonly': True, 'tip': 'Minimum value of passed `Signal`', 'removable': False, 'type': 'str'}), ('Bin Width', {'expanded': True, 'name': 'Bin Width', 'strictNaming': False, 'default': '', 'enabled': True, 'title': None, 'renamable': False, 'value': '0.44', 'visible': True, 'readonly': True, 'tip': 'Bin width', 'removable': False, 'type': 'str'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (998.5293628700763, -599.3611670469098), 'bypass': False}, 'pos': (998.5293628700763, -599.3611670469098), 'class': 'Plot Histogram', 'name': u'Plot Histogram.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x0', {'expanded': True, 'suffix': 'm', 'limits': (0.0, 10000000.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Distance between an observed well and shoreline (in meters)', 'title': 'Distance', 'renamable': False, 'value': 42.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'x0'}), ('t0', {'expanded': True, 'suffix': 'hours', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 12.42, 'tip': 'Period of the tide (in hours)', 'title': 'Tide Period', 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 't0'}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.31929713010803007, 'visible': True, 'readonly': False, 'tip': 'Estimated or guessed Tidal Efficiency of an aquifer near an observed well (dimensionless).', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use Tidal Efficiency value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('tlag', {'expanded': True, 'suffix': 'min', 'limits': (0.0, 600.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Estimated or guessed Time Lag (in minutes) of the groundwater fluctuation-signal in observed well.', 'title': 'Time Lag', 'renamable': False, 'value': 13.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'tlag'}), ('manual_tlag', {'expanded': True, 'name': 'manual_tlag', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `tlag` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use Time Lag value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('D_grp', {'expanded': True, 'name': 'D_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Calculated Diffusivity', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('D_e', {'expanded': True, 'name': 'D_e', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (E)', 'renamable': False, 'value': '0.0951', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('D_tlag', {'expanded': True, 'name': 'D_tlag', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (tlag)', 'renamable': False, 'value': '10.3163', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (1402.0726334584194, -330.8124457638356), 'bypass': False}, 'pos': (1402.0726334584194, -330.8124457638356), 'class': 'Diffusivity (Ferris)', 'name': u'Diffusivity (Ferris).0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x0', {'expanded': True, 'suffix': 'm', 'limits': (0.0, 10000000.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Distance between an observed well and shoreline (in meters)', 'title': 'Distance', 'renamable': False, 'value': 75.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'x0'}), ('t0', {'expanded': True, 'suffix': 'hours', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 12.42, 'tip': 'Period of the tide (in hours)', 'title': 'Tide Period', 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 't0'}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.17, 'visible': True, 'readonly': False, 'tip': 'Estimated or guessed Tidal Efficiency of an aquifer near an observed well (dimensionless).', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'Use Tidal Efficiency value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('tlag', {'expanded': True, 'suffix': 'min', 'limits': (0.0, 600.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Estimated or guessed Time Lag (in minutes) of the groundwater fluctuation-signal in observed well.', 'title': 'Time Lag', 'renamable': False, 'value': 27.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'tlag'}), ('manual_tlag', {'expanded': True, 'name': 'manual_tlag', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `tlag` Manually', 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'Use Time Lag value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('D_grp', {'expanded': True, 'name': 'D_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Calculated Diffusivity', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('D_e', {'expanded': True, 'name': 'D_e', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (E)', 'renamable': False, 'value': '0.1259', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('D_tlag', {'expanded': True, 'name': 'D_tlag', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (tlag)', 'renamable': False, 'value': '7.6262', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (1401.0763395916172, -102.18669743036367), 'bypass': False}, 'pos': (1401.0763395916172, -102.18669743036367), 'class': 'Diffusivity (Ferris)', 'name': u'Diffusivity (Ferris).1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('x0', {'expanded': True, 'suffix': 'm', 'limits': (0.0, 10000000.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Distance between an observed well and shoreline (in meters)', 'title': 'Distance', 'renamable': False, 'value': 50.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'x0'}), ('t0', {'expanded': True, 'suffix': 'hours', 'limits': (0.0, 100000000000.0), 'strictNaming': False, 'default': 12.42, 'tip': 'Period of the tide (in hours)', 'title': 'Tide Period', 'renamable': False, 'value': 12.42, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 't0'}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': 1.0, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.242, 'visible': True, 'readonly': False, 'tip': 'Estimated or guessed Tidal Efficiency of an aquifer near an observed well (dimensionless).', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'Use Tidal Efficiency value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('tlag', {'expanded': True, 'suffix': 'min', 'limits': (0.0, 600.0), 'strictNaming': False, 'default': 0.0, 'tip': 'Estimated or guessed Time Lag (in minutes) of the groundwater fluctuation-signal in observed well.', 'title': 'Time Lag', 'renamable': False, 'value': 17.0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'float', 'enabled': True, 'name': 'tlag'}), ('manual_tlag', {'expanded': True, 'name': 'manual_tlag', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `tlag` Manually', 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': 'Use Time Lag value received in terminal or set manually. If checked - set manually', 'removable': False, 'type': 'bool'})])}), ('D_grp', {'expanded': True, 'name': 'D_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Calculated Diffusivity', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('D_e', {'expanded': True, 'name': 'D_e', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (E)', 'renamable': False, 'value': '0.0873', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'}), ('D_tlag', {'expanded': True, 'name': 'D_tlag', 'strictNaming': False, 'default': '', 'enabled': True, 'title': 'Diffusivity (tlag)', 'renamable': False, 'value': '8.5498', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (1402.8946995914696, -216.74337742104944), 'bypass': False}, 'pos': (1402.8946995914696, -216.74337742104944), 'class': 'Diffusivity (Ferris)', 'name': u'Diffusivity (Ferris).3'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:Label', {'expanded': True, 'name': 'Y:Label', 'strictNaming': False, 'default': 'Water level', 'enabled': True, 'title': None, 'renamable': False, 'value': 'Water level', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Y:Units', {'expanded': True, 'name': 'Y:Units', 'strictNaming': False, 'default': 'm AMSL', 'enabled': True, 'title': None, 'renamable': False, 'value': 'm AMSL', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('Legend', {'expanded': True, 'name': 'Legend', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': True, 'removable': False, 'type': 'bool'}), ('Crosshair', {'expanded': True, 'name': 'Crosshair', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Data Points', {'expanded': True, 'name': 'Data Points', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (2002.9997768848489, -386.6814972405926), 'bypass': False}, 'pos': (2002.9997768848489, -386.6814972405926), 'class': 'TimeseriesPlot', 'name': u'TimeseriesPlot.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': ['see matched peaks'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': 'see matched peaks', 'visible': True, 'readonly': True, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '2) Cyclic amplitude', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.3193', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (1175.3894460179285, -348.5407625400351), 'bypass': False}, 'pos': (1175.3894460179285, -348.5407625400351), 'class': 'tidalEfficiency', 'name': u'tidalEfficiency.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': u'GW_3', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '1) STD', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.2919', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (1175.0806767721447, -226.47774052232103), 'bypass': False}, 'pos': (1175.0806767721447, -226.47774052232103), 'class': 'tidalEfficiency', 'name': u'tidalEfficiency.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data', 'title': None, 'renamable': False, 'value': u'Weser', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data', 'title': None, 'renamable': False, 'value': u'GW_4', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'strictNaming': False, 'default': '1) STD', 'tip': 'Method to calculate Tidal Efficiency. Read docs', 'title': None, 'renamable': False, 'value': '1) STD', 'visible': True, 'readonly': False, 'values': ['1) STD', '2) Cyclic amplitude', '3) Cyclic STD'], 'removable': False, 'type': 'list', 'enabled': True}), ('E = ', {'expanded': True, 'name': 'E = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0.2307', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])}, 'pos': (1172.3608019089477, -100.66090385980056), 'bypass': False}, 'pos': (1172.3608019089477, -100.66090385980056), 'class': 'tidalEfficiency', 'name': u'tidalEfficiency.2'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('datetime <pattern>', {'expanded': True, 'name': 'datetime <pattern>', 'limits': ['datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.\nBy default is `None`, meaning that datetime objects are\nlocated within `pd.DataFrame.index`. If not `None` - pass the\ncolumn-name of dataframe where datetime objects are located.', 'title': None, 'renamable': False, 'value': 'datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime <pickFrom>', {'expanded': True, 'name': 'datetime <pickFrom>', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.\nBy default is `None`, meaning that datetime objects are\nlocated within `pd.DataFrame.index`. If not `None` - pass the\ncolumn-name of dataframe where datetime objects are located.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True})])}, 'pos': (1839.6361292704887, -189.87991369784453), 'bypass': False}, 'pos': (1839.6361292704887, -189.87991369784453), 'class': 'pickEqualDates', 'name': 'pickEqualDates.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('column', {'expanded': True, 'name': 'column', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with hydrograph data', 'title': None, 'renamable': False, 'value': u'GW_2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('datetime', {'expanded': True, 'name': 'datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects.', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('Peak Detection Params', {'expanded': True, 'name': 'Peak Detection Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('order', {'expanded': True, 'name': 'order', 'limits': (0, 10000000), 'strictNaming': False, 'default': 100, 'enabled': True, 'title': None, 'renamable': False, 'value': 22, 'visible': True, 'readonly': False, 'tip': 'How many points on each side to use for the comparison', 'removable': False, 'type': 'int'}), ('mode', {'expanded': True, 'name': 'mode', 'limits': ['clip', 'wrap'], 'strictNaming': False, 'default': 'clip', 'tip': 'How the edges of the vector are treated. \xe2\x80\x98wrap\xe2\x80\x99 (wrap around)\nor \xe2\x80\x98clip\xe2\x80\x99 (treat overflow as the same as the last (or first) element)', 'title': None, 'renamable': False, 'value': 'clip', 'visible': True, 'readonly': False, 'values': ['clip', 'wrap'], 'removable': False, 'type': 'list', 'enabled': True}), ('removeRegions', {'expanded': True, 'name': 'removeRegions', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': True, 'tip': 'remove possible multiple peaks that go one-by-one', 'removable': False, 'type': 'bool'})])}), ('Period Check Params', {'expanded': True, 'name': 'Period Check Params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('T', {'expanded': True, 'name': 'T', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'12.42', 'visible': True, 'readonly': False, 'tip': 'Awaited period of the signal in hours. If `None`, will calculate\nthe Period `T` as the mean of difference between peaks, multiplied\nby two (i.e. T = peaks["time"].diff().mean()*2)', 'removable': False, 'type': 'str'}), ('hMargin', {'expanded': True, 'name': 'hMargin', 'limits': (0.0, 100.0), 'strictNaming': False, 'default': 1.5, 'enabled': True, 'title': None, 'renamable': False, 'value': 2.5, 'visible': True, 'readonly': False, 'tip': 'Number of hours, safety margin when comparing period length.\nSee formula below:\nT/2 - hMargin < T_i/2 < T/2 + hMargin', 'removable': False, 'type': 'float'}), ('Warnings', {'expanded': True, 'name': 'Warnings', 'strictNaming': False, 'default': '?', 'enabled': True, 'title': None, 'renamable': False, 'value': '1', 'visible': True, 'readonly': True, 'tip': 'Number of period-check warnings detected after detecting peaks.\nWarnings are raised where period condition is not met.\tHit `Plot` button to visualize errors', 'removable': False, 'type': 'str'})])}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (858.3994673131043, -350.6272010027594), 'bypass': False}, 'pos': (858.3994673131043, -350.6272010027594), 'class': 'detectPeaks_ts', 'name': 'peak_gw2.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('river', {'expanded': True, 'name': 'river', 'limits': [u'W [NN+m]'], 'strictNaming': False, 'default': None, 'tip': 'Column name with RIVER hydrograph data\nin `df_w` dataframe', 'title': None, 'renamable': False, 'value': u'W [NN+m]', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('river_dtime', {'expanded': True, 'name': 'river_dtime', 'limits': [u'datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects\nin `df_w` dataframe', 'title': None, 'renamable': False, 'value': u'datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw', {'expanded': True, 'name': 'gw', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Column name with GROUNDWATER hydrograph data\nin `df_gw` dataframe', 'title': None, 'renamable': False, 'value': u'GW_2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('gw_dtime', {'expanded': True, 'name': 'gw_dtime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Location of the datetime objects\nin `df_gw` dataframe', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['1) Erskine 1991'], 'strictNaming': False, 'default': '1) Erskine 1991', 'tip': 'Method to calculate TimeLag. Read docs', 'title': None, 'renamable': False, 'value': '1) Erskine 1991', 'visible': True, 'readonly': False, 'values': ['1) Erskine 1991'], 'removable': False, 'type': 'list', 'enabled': True}), ('E_grp', {'expanded': True, 'name': 'E_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('E', {'expanded': True, 'name': 'E', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Tidal Efficiency', 'renamable': False, 'value': 0.31929713010803007, 'visible': True, 'readonly': False, 'tip': 'Tidal Efficiency (dimensionless)', 'removable': False, 'type': 'float'}), ('manual_E', {'expanded': True, 'name': 'manual_E', 'strictNaming': False, 'default': False, 'enabled': True, 'title': 'Set `E` Manually', 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Use `E` value received in terminal or set manually', 'removable': False, 'type': 'bool'})])}), ('tlag_grp', {'expanded': True, 'name': 'tlag_grp', 'strictNaming': False, 'default': None, 'enabled': True, 'title': 'Time Lag Parameters', 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': '', 'removable': False, 'type': 'group', 'children': OrderedDict([('t1', {'expanded': True, 'name': 't1', 'limits': (0, 10000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'First value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('t2', {'expanded': True, 'name': 't2', 'limits': (0, 10000), 'strictNaming': False, 'default': 60, 'enabled': True, 'title': None, 'renamable': False, 'value': 60, 'visible': True, 'readonly': False, 'tip': 'Last value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('t_step', {'expanded': True, 'name': 't_step', 'limits': (1, 10000), 'strictNaming': False, 'default': 1, 'enabled': True, 'title': None, 'renamable': False, 'value': 1, 'visible': True, 'readonly': False, 'tip': 'Step value for timelag-iteration tuple. In minutes. Read docs', 'removable': False, 'type': 'int'}), ('tlag = ', {'expanded': True, 'name': 'tlag = ', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '0:13:00', 'visible': True, 'readonly': True, 'removable': False, 'type': 'str'})])})])}, 'pos': (1172.3897856206536, -558.862934703151), 'bypass': False}, 'pos': (1172.3897856206536, -558.862934703151), 'class': 'TimeLag', 'name': u'TimeLag.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': [u'GW_1', u'GW_2', u'GW_3', u'GW_4', u'GW_5', u'GW_6', u'Weser'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': u'GW_2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': [u'Datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': u'Datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (128, 128, 128, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'})])}, 'pos': (1803.0422033688742, -457.03693977399143), 'bypass': False}, 'pos': (1803.0422033688742, -457.03693977399143), 'class': 'makeTimeseriesCurve', 'name': u'makeTimeseriesCurve.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Y:signal', {'expanded': True, 'name': 'Y:signal', 'limits': ['fitted GW2'], 'strictNaming': False, 'default': None, 'tip': 'Signal Data-Values (Y-axis)', 'title': None, 'renamable': False, 'value': 'fitted GW2', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('X:datetime', {'expanded': True, 'name': 'X:datetime', 'limits': ['datetime'], 'strictNaming': False, 'default': None, 'tip': 'Datetime Values (X-axis)', 'title': None, 'renamable': False, 'value': 'datetime', 'visible': True, 'readonly': False, 'values': [None], 'removable': False, 'type': 'list', 'enabled': True}), ('tz correct', {'expanded': True, 'name': 'tz correct', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<float>\nONLY FOR CURVE!!!\nTimezone correction\nNumber of hours to add/substract from result. Due to missing\ntimezone settings it may be nessesary to use this parameter.\nCheck the results manually with *TimeseriesPlot* Node', 'removable': False, 'type': 'float', 'suffix': ' hours'}), ('color', {'expanded': True, 'name': 'color', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': (255, 170, 0, 255), 'visible': True, 'readonly': False, 'tip': 'Curve color', 'removable': False, 'type': 'color'})])}, 'pos': (1805.5108153875876, -342.2464809037087), 'bypass': False}, 'pos': (1805.5108153875876, -342.2464809037087), 'class': 'makeTimeseriesCurve', 'name': u'makeTimeseriesCurve.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/data_farge_river_1min.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (877.4994788645015, -810.65884729132), 'bypass': False}, 'pos': (877.4994788645015, -810.65884729132), 'class': 'readXLS', 'name': 'readXLS.1'}, {'state': {'pos': (1015.5840196229562, -96.73161743080703), 'bypass': False}, 'pos': (1015.5840196229562, -96.73161743080703), 'class': 'pipe', 'name': u'pipe.0'}, {'state': {'pos': (1664.6562706584605, -197.82973868613266), 'bypass': False}, 'pos': (1664.6562706584605, -197.82973868613266), 'class': 'pipe', 'name': 'pipe.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/dara_farge.xlsx', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Parameters', {'expanded': True, 'name': 'Parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('sheetname', {'expanded': True, 'name': 'sheetname', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<string, int, mixed list of strings/ints, or None, default 0>\nStrings are used for sheet names, Integers are used in zero-indexed sheet positions.\nLists of strings/integers are used to request multiple sheets.\nSpecify `None` to get all sheets.\nstr|int -> DataFrame is returned. list|None -> Dict of DataFrames is returned, with \nkeys representing sheets.\nAvailable Cases\n - Defaults to 0 -> 1st sheet as a DataFrame\n - 1 -> 2nd sheet as a DataFrame\n - "Sheet1" -> 1st sheet as a DataFrame\n - [0,1,"Sheet5"] -> 1st, 2nd & 5th sheet as a dictionary of DataFrames\n - None -> All sheets as a dictionary of DataFrames', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default 0>\nRow (0-indexed) to use for the column labels of the parsed DataFrame. If a list of \nintegers is passed those row positions will be combined into a MultiIndex', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nRows to skip at the beginning (0-indexed)', 'removable': False, 'type': 'str'}), ('skip_footer', {'expanded': True, 'name': 'skip_footer', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, default 0>\nRows at the end to skip (0-indexed)', 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, list of ints, default None>\nColumn (0-indexed) to use as the row labels of the DataFrame. Pass None if there is \nno such column. If a list is passed, those columns will be combined into a\nMultiIndex', 'removable': False, 'type': 'str'}), ('converters', {'expanded': False, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': '', 'visible': True, 'readonly': False, 'tip': '<dict, default None>\nDict of functions for converting values in certain columns. Keys can either be \nintegers or column labels, values are functions that take one input argument, the \nExcel cell content, and return the transformed content.', 'removable': False, 'type': 'text'}), ('parse_cols', {'expanded': True, 'name': 'parse_cols', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< int or list, default None>\n - If None then parse all columns,\n - If int then indicates last column to be parsed\n - If list of ints then indicates list of column numbers to be parsed\n - If string then indicates comma separated list of column names and column ranges \n   (e.g. \xe2\x80\x9cA:E\xe2\x80\x9d or \xe2\x80\x9cA,C,E:F\xe2\x80\x9d)', 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '< list-like, default None>\n List of additional strings to recognize as NA/NaN', 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'tip': '<bool, default True>\nIf na_values are specified and keep_default_na is False the default NaN values are \noverridden, otherwise they\xe2\x80\x99re appended to', 'removable': False, 'type': 'bool'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<str, default None>\nThousands separator for parsing string columns to numeric. Note that this parameter \nis only necessary for columns stored as TEXT in Excel, any numeric columns will \nautomatically be parsed, regardless of display format.', 'removable': False, 'type': 'str'}), ('Additional parameters', {'expanded': False, 'name': 'Additional parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"verbose": False, "engine": None, "convert_float": True}\n{}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (607.1583790645341, -414.0905293313085), 'bypass': False}, 'pos': (607.1583790645341, -414.0905293313085), 'class': 'readXLS', 'name': u'readXLS.0'}, {'state': {'pos': (876.9909180512439, -707.3476905958453), 'bypass': False}, 'pos': (876.9909180512439, -707.3476905958453), 'class': 'pipe', 'name': u'pipe.5'}, {'state': {'pos': (2002.3407648732154, -179.07886126915142), 'bypass': False}, 'pos': (2002.3407648732154, -179.07886126915142), 'class': 'QuickView', 'name': u'QuickView.1'}, {'state': {'pos': (632.4535329583526, -543.544086962448), 'bypass': False}, 'pos': (632.4535329583526, -543.544086962448), 'class': 'QuickView', 'name': u'QuickView.0'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (300.0, 0.0)
    bypass: False
