pos: (0.0, 0.0)
connects: [('df2recArray.0', 'Out', 'ColumnSelect.0', 'In'), ('read_GW1', 'output', 'viewPandasDf.2', 'In'), ('read_GW1', 'output', 'Sample Data', 'gw'), ('colSel', 'W [NN+m]', 'PlotCurve.0', 'y'), ('ColumnSelect.1', 'datetime', 'datetime2int', 'input'), ('datetime2int', 'output', 'PlotCurve.2', 'x'), ('PythonEval.1', 'output', 'PlotCurve.1', 'x'), ('ColumnSelect.1', 'W [NN+m]', 'PlotCurve.2', 'y'), ('ColumnSelect.0', 'W [NN+m]', 'PlotCurve.1', 'y'), ('PlotCurve.0', 'plot', 'PlotArray.0', 'Array'), ('read_RIVER', 'output', 'Sample Data', 'w'), ('read_RIVER', 'output', 'viewPandasDf.0', 'In'), ('df2recArray.1', 'Out', 'colSel', 'In'), ('colSel', 'datetime', 'PythonEval.0', 'input'), ('PlotCurve.1', 'plot', 'PlotArray.0', 'Array'), ('Sample Data', 'w_sel', 'viewPandasDf.1', 'In'), ('read_RIVER', 'output', 'df2recArray.0', 'In'), ('ColumnSelect.0', 'datetime', 'PythonEval.1', 'input'), ('read_GW1', 'output', 'df2recArray.1', 'In'), ('PythonEval.0', 'output', 'PlotCurve.0', 'x'), ('df2recArray.2', 'Out', 'ColumnSelect.1', 'In'), ('Sample Data', 'w_sel', 'df2recArray.2', 'In'), ('PlotCurve.2', 'plot', 'PlotArray.0', 'Array')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (1370.4622773775, 88.28728042868374)
    bypass: False
nodes: [{'state': {'pos': (-184.8911161719578, -412.30089492697914), 'bypass': False}, 'pos': (-184.8911161719578, -412.30089492697914), 'class': 'viewPandasDf', 'name': 'viewPandasDf.1'}, {'state': {'pos': (637.0219493760027, -297.67089358781925), 'bypass': False}, 'pos': (637.0219493760027, -297.67089358781925), 'class': 'PlotArray', 'name': 'PlotArray.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/FARGE_project_work/data/farge_GW_data_ORIGINAL/Farge-GW1_HB-20_10min_081014_130415.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': u',', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u"'\\t'", 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'17', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u"{'datetime': [0, 1]}", 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u'lambda x,y: datetime.strptime(x+\' \'+y, "%d/%m/%Y %H:%M:%S")', 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'---', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'[0, 1, 5]', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-357.82783957617477, -436.0252364236385), 'bypass': False}, 'pos': (-357.82783957617477, -436.0252364236385), 'class': 'readCSV', 'name': 'read_GW1'}, {'state': {'text': "# Access inputs as args['input_name']\nfrom lib.flowchart.package import Package\n\n\ndef process(df1, df2):\n  selector = df1['datetime'].isin(df2['datetime'])\n  selectedDf = df1[selector]\n  return Package(selectedDf)\n\nreturn {'w_sel': process(args['w'].unpack(), args['gw'].unpack())}", 'terminals': OrderedDict([('gw', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('w', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': True, 'optional': False}), ('w_sel', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (-184.41318171018594, -304.14629150239915), 'bypass': False}, 'pos': (-184.41318171018594, -304.14629150239915), 'class': 'PythonEval', 'name': 'Sample Data'}, {'state': {'text': "return{'output': args['input'].astype(np.int64)//10**9-60*60 }", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (244.7869069512414, -467.2524994429705), 'bypass': False}, 'pos': (244.7869069512414, -467.2524994429705), 'class': 'PythonEval', 'name': 'PythonEval.0'}, {'state': {'text': "return{'output': args['input'].astype(np.int64)//10**9-60*60 }", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (253.20627742535055, -8.396808603986472), 'bypass': False}, 'pos': (253.20627742535055, -8.396808603986472), 'class': 'PythonEval', 'name': 'PythonEval.1'}, {'state': {'text': "return{'output': args['input'].astype(np.int64)//10**9-60*60 }", 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (250.8700031908018, -198.72163371856908), 'bypass': False}, 'pos': (250.8700031908018, -198.72163371856908), 'class': 'PythonEval', 'name': 'datetime2int'}, {'state': {'pos': (-32.20621234315365, -301.73437075373744), 'bypass': False}, 'pos': (-32.20621234315365, -301.73437075373744), 'class': 'df2recArray', 'name': 'df2recArray.2'}, {'state': {'pos': (-40.93873864620696, -92.54757768974952), 'bypass': False}, 'pos': (-40.93873864620696, -92.54757768974952), 'class': 'df2recArray', 'name': 'df2recArray.0'}, {'state': {'pos': (-32.948549545130675, -576.2108325127767), 'bypass': False}, 'pos': (-32.948549545130675, -576.2108325127767), 'class': 'df2recArray', 'name': 'df2recArray.1'}, {'state': {'pos': (-357.33108768676516, -539.1379974893156), 'bypass': False}, 'pos': (-357.33108768676516, -539.1379974893156), 'class': 'viewPandasDf', 'name': 'viewPandasDf.2'}, {'state': {'pos': (-366.74932779042865, -273.22605622602106), 'bypass': False}, 'pos': (-366.74932779042865, -273.22605622602106), 'class': 'viewPandasDf', 'name': 'viewPandasDf.0'}, {'state': {'columns': ['W [NN+m]', 'datetime'], 'pos': (102.30974699290232, -299.02346274390106), 'bypass': False}, 'pos': (102.30974699290232, -299.02346274390106), 'class': 'ColumnSelect', 'name': 'ColumnSelect.1'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/FARGE_project_work/data/farge_W_data_ORIGINAL/FARGE_1min_01102014_13042015.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': u',', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u"'\\t'", 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': u'0', 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'17', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u"{'datetime': [0, 1]}", 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u'lambda x,y: datetime.strptime(x+\' \'+y, "%d/%m/%Y %H:%M:%S")', 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u"'---'", 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'[0, 1, 5]', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-367.0049084498, -170.94405095887242), 'bypass': False}, 'pos': (-367.0049084498, -170.94405095887242), 'class': 'readCSV', 'name': 'read_RIVER'}, {'state': {'columns': ['W [NN+m]', 'datetime'], 'pos': (102.91088884863092, -578.9139978091862), 'bypass': False}, 'pos': (102.91088884863092, -578.9139978091862), 'class': 'ColumnSelect', 'name': 'colSel'}, {'state': {'pos': (393.7527973683989, -297.6787763332826), 'bypass': False, 'ctrl': {'color': (170, 0, 0, 255)}}, 'pos': (393.7527973683989, -297.6787763332826), 'class': 'PlotCurve', 'name': 'PlotCurve.2'}, {'state': {'pos': (401.069789161996, -87.18914247948766), 'bypass': False, 'ctrl': {'color': (128, 128, 128, 255)}}, 'pos': (401.069789161996, -87.18914247948766), 'class': 'PlotCurve', 'name': 'PlotCurve.1'}, {'state': {'pos': (386.7683474578102, -578.3940938850415), 'bypass': False, 'ctrl': {'color': (255, 170, 0, 255)}}, 'pos': (386.7683474578102, -578.3940938850415), 'class': 'PlotCurve', 'name': 'PlotCurve.0'}, {'state': {'columns': ['W [NN+m]', 'datetime'], 'pos': (100.4077658612166, -89.37273242910895), 'bypass': False}, 'pos': (100.4077658612166, -89.37273242910895), 'class': 'ColumnSelect', 'name': 'ColumnSelect.0'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (1364.614120550666, -0.6176099659334113)
    bypass: False
