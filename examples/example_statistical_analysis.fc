pos: (0.0, 0.0)
connects: [(u'interpolateDf.0', 'Out', 'df2recArray.0', 'In'), ('Input', 'dataIn', 'PlotWidget.0', 'In'), ('readCSV.1', 'output', 'viewPandasDf.0', 'In'), ('Input', 'dataIn', 'GaussianFilter.0', 'In'), ('df2recArray.0', 'Out', 'ColSel', 'In'), ('GaussianFilter.0', 'Out', 'Output', 'dataOut'), ('readCSV.1', 'output', u'interpolateDf.0', 'In'), ('ColSel', 'GW_6', 'PlotStatistics.0', 'input')]
terminals:
    dataOut:
        multi: False
        io: 'out'
        renamable: False
        multiable: False
        removable: False
        optional: False
    dataIn:
        multi: False
        io: 'in'
        renamable: False
        multiable: False
        removable: False
        optional: False
bypass: False
inputNode:
    terminals:
        dataIn:
            multi: False
            io: 'out'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (261.0296991500918, 292.24218190027244)
    bypass: False
nodes: [{'state': {'pos': (195.95415141162454, 284.66284251503623), 'bypass': False, 'ctrl': {'sigma': 5.0}}, 'pos': (195.95415141162454, 284.66284251503623), 'class': 'GaussianFilter', 'name': 'GaussianFilter.0'}, {'state': {'pos': (30.113247644754836, 282.5950146535861), 'bypass': False}, 'pos': (30.113247644754836, 282.5950146535861), 'class': 'PlotWidget', 'name': 'PlotWidget.0'}, {'state': {'pos': (-534.293252629841, -567.0687486275363), 'bypass': False}, 'pos': (-534.293252629841, -567.0687486275363), 'class': 'viewPandasDf', 'name': 'viewPandasDf.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Datetime', {'expanded': False, 'name': 'Datetime', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_1', {'expanded': False, 'name': 'GW_1', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 3, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_2', {'expanded': False, 'name': 'GW_2', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_3', {'expanded': False, 'name': 'GW_3', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_4', {'expanded': False, 'name': 'GW_4', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_5', {'expanded': False, 'name': 'GW_5', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('GW_6', {'expanded': False, 'name': 'GW_6', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])}), ('W_1', {'expanded': False, 'name': 'W_1', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool', 'children': OrderedDict([('Entries', {'expanded': True, 'name': 'Entries', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 9253, 'visible': True, 'readonly': True, 'tip': 'number of entries in current column', 'removable': False, 'type': 'int'}), ('NaNs before', {'expanded': True, 'name': 'NaNs before', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column before interpolation', 'removable': False, 'type': 'int'}), ('NaNs after', {'expanded': True, 'name': 'NaNs after', 'strictNaming': False, 'default': -1, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': True, 'tip': 'number of NaNs in current column after interpolation', 'removable': False, 'type': 'int'}), ('interpolateMargin', {'expanded': True, 'name': 'interpolateMargin', 'limits': (1, 1000), 'strictNaming': False, 'default': 100, 'tip': 'number of data-points to consider left and\nright from NaN value during interpolation', 'title': None, 'renamable': False, 'readonly': False, 'value': 100, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('method', {'expanded': True, 'name': 'method', 'limits': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'strictNaming': False, 'default': 'polynomial', 'tip': 'Method of interpolation. See docs', 'title': None, 'renamable': False, 'value': 'linear', 'visible': True, 'readonly': False, 'values': ['linear', 'time', 'index', 'values', 'nearest', 'zero', 'slinear', 'quadratic', 'cubic', 'barycentric', 'krogh', 'polynomial', 'spline', 'piecewise_polynomial', 'pchip'], 'removable': False, 'type': 'list', 'enabled': True}), ('order', {'expanded': True, 'name': 'order', 'limits': (1, 1000), 'strictNaming': False, 'default': 15, 'tip': 'Both \xe2\x80\x98polynomial\xe2\x80\x99 and \xe2\x80\x98spline\xe2\x80\x99 require that you\n also specify an order (int), e.g. df.interpolate \n(method=\xe2\x80\x99polynomial\xe2\x80\x99, order=4). See docs', 'title': None, 'renamable': False, 'readonly': False, 'value': 15, 'visible': True, 'step': 1, 'removable': False, 'type': 'int', 'enabled': True}), ('**kwargs', {'expanded': False, 'name': '**kwargs', 'strictNaming': False, 'default': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Example:\n#{"axis": 1, "limit": 20, "limit_direction": "both"}', 'visible': True, 'readonly': False, 'tip': 'these <**kwargs> will be passed to DataFrame.interpolate()\nin addition to defined above "method" and "order".\nLines may be commented with "#"', 'removable': False, 'type': 'text'}), ('Plot', {'expanded': True, 'name': 'Plot', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': False, 'readonly': False, 'tip': 'Visualize performed interpolation with matplotlib', 'removable': False, 'type': 'action'})])})])}, 'pos': (-384.11281197395044, -455.5845415181712), 'bypass': False}, 'pos': (-384.11281197395044, -455.5845415181712), 'class': 'interpolateDf', 'name': u'interpolateDf.0'}, {'state': {'columns': ['GW_6', 'GW_1_interpolated', 'W_1', 'GW_1'], 'pos': (-75.74415456625763, -454.02899735784206), 'bypass': False}, 'pos': (-75.74415456625763, -454.02899735784206), 'class': 'ColumnSelect', 'name': 'ColSel'}, {'state': {'text': '# Access inputs as args[\'input_name\']\n\nimport seaborn as sns\nfrom lib.functions import plot_pandas as pp\n\ninput = args[\'input\']\nif input is not None:\n  with sns.axes_style("whitegrid"):\n    pp.plot_statistical_analysis(input, plot_title=\'Original Signal\' , ylims=[-3., 5.0],\n                    ylabel1="m AMSL",                                     xlabel1="number of data points",\n                    ylabel2="Normal PDF", xlabel2="m AMSL",\n                    ylabel3="Normal CDF",      xlabel3="m AMSL",\n                    papersize=\'A4\',\n                    axeslabel_fontsize=18., title_fontsize=20., axesvalues_fontsize=18.,   annotation_fontsize=18., legend_fontsize=18.)\n', 'terminals': OrderedDict([('input', {'multi': False, 'io': 'in', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False}), ('output', {'multi': False, 'io': 'out', 'renamable': True, 'multiable': True, 'removable': False, 'optional': False})]), 'pos': (85.50930631605627, -453.25560501664836), 'bypass': False}, 'pos': (85.50930631605627, -453.25560501664836), 'class': 'PythonEval', 'name': 'PlotStatistics.0'}, {'state': {'pos': (-231.55462409287276, -454.9160400474465), 'bypass': False}, 'pos': (-231.55462409287276, -454.9160400474465), 'class': 'df2recArray', 'name': 'df2recArray.0'}, {'state': {'crtlWidget': {'expanded': True, 'name': 'params', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('Help', {'expanded': True, 'name': 'Help', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load state', {'expanded': True, 'name': 'Load state', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Select File', {'expanded': True, 'name': 'Select File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'/home/nck/prj/master_thesis/TESTDATA.all', 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'}), ('Load CSV parameters', {'expanded': True, 'name': 'Load CSV parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('decimal', {'expanded': True, 'name': 'decimal', 'strictNaming': False, 'default': '.', 'enabled': True, 'title': None, 'renamable': False, 'value': '.', 'visible': True, 'readonly': False, 'tip': '<str>\nCharacter to recognize as decimal point. E.g. use ","" for European data', 'removable': False, 'type': 'str'}), ('delimiter', {'expanded': True, 'name': 'delimiter', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': ';', 'visible': True, 'readonly': False, 'tip': '<str>\nDelimiter to use. If sep is None, will try to automatically determine this. Regular expressions are accepted', 'removable': False, 'type': 'str'}), ('header', {'expanded': True, 'name': 'header', 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'tip': '< int, list of ints, default \xe2\x80\x98infer\xe2\x80\x99>\nRow number(s) to use as the column names, and the start of the data.\nREAD HELP', 'removable': False, 'type': 'str'}), ('skiprows', {'expanded': True, 'name': 'skiprows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'1', 'visible': True, 'readonly': False, 'tip': '<list-like or integer, default None>\nLine numbers to skip (0-indexed) or number of lines to skip (int) at the start of the file', 'removable': False, 'type': 'str'}), ('parse_dates', {'expanded': True, 'name': 'parse_dates', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': u'[0]', 'visible': True, 'readonly': False, 'tip': '<boolean, list of ints or names, list of lists, or dict, default False>\nIf True -> try parsing the index. If [1, 2, 3] -> try parsing columns 1, 2, 3 each as a\nseparate date column. If [[1, 3]] -> combine columns 1 and 3 and parse as a single\ndate column. {\xe2\x80\x98foo\xe2\x80\x99 : [1, 3]} -> parse columns 1, 3 as date and call result \xe2\x80\x98foo\xe2\x80\x99 A fast-\npath exists for iso8601-formatted dates.', 'removable': False, 'type': 'str'}), ('date_parser', {'expanded': True, 'name': 'date_parser', 'strictNaming': False, 'default': '%d.%m.%Y %H:%M:%S', 'enabled': True, 'title': None, 'renamable': False, 'value': u"lambda x: datetime.strptime(x, '%d.%m.%Y %H:%M')", 'visible': True, 'readonly': False, 'tip': '<str>\nDatetime format of the data in CSV file.\nREAD HELP', 'removable': False, 'type': 'str'}), ('nrows', {'expanded': True, 'name': 'nrows', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'tip': '<int, default None>\nNumber of rows of file to read. Useful for reading pieces of large files', 'removable': False, 'type': 'str'}), ('Advanced parameters', {'expanded': False, 'name': 'Advanced parameters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'group', 'children': OrderedDict([('prefix', {'expanded': True, 'name': 'prefix', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('converters', {'expanded': True, 'name': 'converters', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('thousands', {'expanded': True, 'name': 'thousands', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipfooter', {'expanded': True, 'name': 'skipfooter', 'limits': (0, 10000000), 'strictNaming': False, 'default': 0, 'enabled': True, 'title': None, 'renamable': False, 'value': 0, 'visible': True, 'readonly': False, 'removable': False, 'type': 'int'}), ('comment', {'expanded': True, 'name': 'comment', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('na_values', {'expanded': True, 'name': 'na_values', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'---', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('keep_default_na', {'expanded': True, 'name': 'keep_default_na', 'strictNaming': False, 'default': True, 'enabled': True, 'title': None, 'renamable': False, 'value': True, 'visible': True, 'readonly': False, 'removable': False, 'type': 'bool'}), ('names', {'expanded': True, 'name': 'names', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('index_col', {'expanded': True, 'name': 'index_col', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': u'', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('usecols', {'expanded': True, 'name': 'usecols', 'strictNaming': False, 'default': None, 'enabled': False, 'title': None, 'renamable': False, 'value': u'[0,1,2,3,4,5,6,7]', 'visible': True, 'readonly': False, 'removable': False, 'type': 'str'}), ('skipinitialspace', {'expanded': True, 'name': 'skipinitialspace', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'My tooltip', 'removable': False, 'type': 'bool'}), ('Manually set parameters', {'expanded': False, 'name': 'Manually set parameters', 'strictNaming': False, 'default': False, 'enabled': True, 'title': None, 'renamable': False, 'value': False, 'visible': True, 'readonly': False, 'tip': 'Ignore all setting before (except File selection) and read\nparameter dictionary from the text-field below.\nREAD HELP', 'removable': False, 'type': 'bool', 'children': OrderedDict([('Manuall parameters', {'expanded': True, 'name': 'Manuall parameters', 'strictNaming': False, 'default': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'enabled': True, 'title': None, 'renamable': False, 'value': '#Pass here manually params. For Example:\n#{"decimal": ".", "skiprows": 2, skip_blank_lines": True}', 'visible': True, 'readonly': False, 'removable': False, 'type': 'text'})])})])})])}), ('Load File', {'expanded': True, 'name': 'Load File', 'strictNaming': False, 'default': None, 'enabled': True, 'title': None, 'renamable': False, 'value': None, 'visible': True, 'readonly': False, 'removable': False, 'type': 'action'})])}, 'pos': (-534.6936071902969, -455.8696754918301), 'bypass': False}, 'pos': (-534.6936071902969, -455.8696754918301), 'class': 'readCSV', 'name': 'readCSV.1'}]
outputNode:
    terminals:
        dataOut:
            multi: False
            io: 'in'
            renamable: False
            multiable: False
            removable: False
            optional: False
    pos: (116.90742824277936, 269.6106379607305)
    bypass: False
